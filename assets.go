// Code generated by go-bindata.
// sources:
// admin/dist/css/app.78060d66.css
// admin/dist/css/chunk-vendors.e00a3e23.css
// admin/dist/css/projects.804243e7.css
// admin/dist/favicon.ico
// admin/dist/img/icons/android-chrome-192x192.png
// admin/dist/img/icons/android-chrome-512x512.png
// admin/dist/img/icons/apple-touch-icon-120x120.png
// admin/dist/img/icons/apple-touch-icon-152x152.png
// admin/dist/img/icons/apple-touch-icon-180x180.png
// admin/dist/img/icons/apple-touch-icon-60x60.png
// admin/dist/img/icons/apple-touch-icon-76x76.png
// admin/dist/img/icons/apple-touch-icon.png
// admin/dist/img/icons/favicon-16x16.png
// admin/dist/img/icons/favicon-32x32.png
// admin/dist/img/icons/msapplication-icon-144x144.png
// admin/dist/img/icons/mstile-150x150.png
// admin/dist/img/icons/safari-pinned-tab.svg
// admin/dist/index.html
// admin/dist/js/about.d300568b.js
// admin/dist/js/about.d300568b.js.map
// admin/dist/js/app.f6b9e71e.js
// admin/dist/js/app.f6b9e71e.js.map
// admin/dist/js/chunk-vendors.fa84e265.js
// admin/dist/js/chunk-vendors.fa84e265.js.map
// admin/dist/js/gear.fc648d2d.js
// admin/dist/js/gear.fc648d2d.js.map
// admin/dist/js/preferences.aedb6778.js
// admin/dist/js/preferences.aedb6778.js.map
// admin/dist/js/projects.b028f481.js
// admin/dist/js/projects.b028f481.js.map
// admin/dist/js/projectstack.ffa2a6ef.js
// admin/dist/js/projectstack.ffa2a6ef.js.map
// admin/dist/js/stack.aaa39c32.js
// admin/dist/js/stack.aaa39c32.js.map
// admin/dist/manifest.json
// admin/dist/robots.txt
// DO NOT EDIT!

package gearbox

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// adminDistCssApp78060d66Css reads file data from disk. It returns an error on failure.
func adminDistCssApp78060d66Css() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/css/app.78060d66.css")
	name := "admin/dist/css/app.78060d66.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistCssChunkVendorsE00a3e23Css reads file data from disk. It returns an error on failure.
func adminDistCssChunkVendorsE00a3e23Css() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/css/chunk-vendors.e00a3e23.css")
	name := "admin/dist/css/chunk-vendors.e00a3e23.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistCssProjects804243e7Css reads file data from disk. It returns an error on failure.
func adminDistCssProjects804243e7Css() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/css/projects.804243e7.css")
	name := "admin/dist/css/projects.804243e7.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistFaviconIco reads file data from disk. It returns an error on failure.
func adminDistFaviconIco() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/favicon.ico")
	name := "admin/dist/favicon.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsAndroidChrome192x192Png reads file data from disk. It returns an error on failure.
func adminDistImgIconsAndroidChrome192x192Png() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/android-chrome-192x192.png")
	name := "admin/dist/img/icons/android-chrome-192x192.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsAndroidChrome512x512Png reads file data from disk. It returns an error on failure.
func adminDistImgIconsAndroidChrome512x512Png() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/android-chrome-512x512.png")
	name := "admin/dist/img/icons/android-chrome-512x512.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsAppleTouchIcon120x120Png reads file data from disk. It returns an error on failure.
func adminDistImgIconsAppleTouchIcon120x120Png() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/apple-touch-icon-120x120.png")
	name := "admin/dist/img/icons/apple-touch-icon-120x120.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsAppleTouchIcon152x152Png reads file data from disk. It returns an error on failure.
func adminDistImgIconsAppleTouchIcon152x152Png() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/apple-touch-icon-152x152.png")
	name := "admin/dist/img/icons/apple-touch-icon-152x152.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsAppleTouchIcon180x180Png reads file data from disk. It returns an error on failure.
func adminDistImgIconsAppleTouchIcon180x180Png() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/apple-touch-icon-180x180.png")
	name := "admin/dist/img/icons/apple-touch-icon-180x180.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsAppleTouchIcon60x60Png reads file data from disk. It returns an error on failure.
func adminDistImgIconsAppleTouchIcon60x60Png() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/apple-touch-icon-60x60.png")
	name := "admin/dist/img/icons/apple-touch-icon-60x60.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsAppleTouchIcon76x76Png reads file data from disk. It returns an error on failure.
func adminDistImgIconsAppleTouchIcon76x76Png() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/apple-touch-icon-76x76.png")
	name := "admin/dist/img/icons/apple-touch-icon-76x76.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsAppleTouchIconPng reads file data from disk. It returns an error on failure.
func adminDistImgIconsAppleTouchIconPng() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/apple-touch-icon.png")
	name := "admin/dist/img/icons/apple-touch-icon.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsFavicon16x16Png reads file data from disk. It returns an error on failure.
func adminDistImgIconsFavicon16x16Png() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/favicon-16x16.png")
	name := "admin/dist/img/icons/favicon-16x16.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsFavicon32x32Png reads file data from disk. It returns an error on failure.
func adminDistImgIconsFavicon32x32Png() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/favicon-32x32.png")
	name := "admin/dist/img/icons/favicon-32x32.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsMsapplicationIcon144x144Png reads file data from disk. It returns an error on failure.
func adminDistImgIconsMsapplicationIcon144x144Png() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/msapplication-icon-144x144.png")
	name := "admin/dist/img/icons/msapplication-icon-144x144.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsMstile150x150Png reads file data from disk. It returns an error on failure.
func adminDistImgIconsMstile150x150Png() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/mstile-150x150.png")
	name := "admin/dist/img/icons/mstile-150x150.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsSafariPinnedTabSvg reads file data from disk. It returns an error on failure.
func adminDistImgIconsSafariPinnedTabSvg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/safari-pinned-tab.svg")
	name := "admin/dist/img/icons/safari-pinned-tab.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistIndexHtml reads file data from disk. It returns an error on failure.
func adminDistIndexHtml() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/index.html")
	name := "admin/dist/index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsAboutD300568bJs reads file data from disk. It returns an error on failure.
func adminDistJsAboutD300568bJs() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/about.d300568b.js")
	name := "admin/dist/js/about.d300568b.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsAboutD300568bJsMap reads file data from disk. It returns an error on failure.
func adminDistJsAboutD300568bJsMap() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/about.d300568b.js.map")
	name := "admin/dist/js/about.d300568b.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsAppF6b9e71eJs reads file data from disk. It returns an error on failure.
func adminDistJsAppF6b9e71eJs() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/app.f6b9e71e.js")
	name := "admin/dist/js/app.f6b9e71e.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsAppF6b9e71eJsMap reads file data from disk. It returns an error on failure.
func adminDistJsAppF6b9e71eJsMap() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/app.f6b9e71e.js.map")
	name := "admin/dist/js/app.f6b9e71e.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsChunkVendorsFa84e265Js reads file data from disk. It returns an error on failure.
func adminDistJsChunkVendorsFa84e265Js() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/chunk-vendors.fa84e265.js")
	name := "admin/dist/js/chunk-vendors.fa84e265.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsChunkVendorsFa84e265JsMap reads file data from disk. It returns an error on failure.
func adminDistJsChunkVendorsFa84e265JsMap() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/chunk-vendors.fa84e265.js.map")
	name := "admin/dist/js/chunk-vendors.fa84e265.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsGearFc648d2dJs reads file data from disk. It returns an error on failure.
func adminDistJsGearFc648d2dJs() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/gear.fc648d2d.js")
	name := "admin/dist/js/gear.fc648d2d.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsGearFc648d2dJsMap reads file data from disk. It returns an error on failure.
func adminDistJsGearFc648d2dJsMap() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/gear.fc648d2d.js.map")
	name := "admin/dist/js/gear.fc648d2d.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsPreferencesAedb6778Js reads file data from disk. It returns an error on failure.
func adminDistJsPreferencesAedb6778Js() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/preferences.aedb6778.js")
	name := "admin/dist/js/preferences.aedb6778.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsPreferencesAedb6778JsMap reads file data from disk. It returns an error on failure.
func adminDistJsPreferencesAedb6778JsMap() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/preferences.aedb6778.js.map")
	name := "admin/dist/js/preferences.aedb6778.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsProjectsB028f481Js reads file data from disk. It returns an error on failure.
func adminDistJsProjectsB028f481Js() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/projects.b028f481.js")
	name := "admin/dist/js/projects.b028f481.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsProjectsB028f481JsMap reads file data from disk. It returns an error on failure.
func adminDistJsProjectsB028f481JsMap() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/projects.b028f481.js.map")
	name := "admin/dist/js/projects.b028f481.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsProjectstackFfa2a6efJs reads file data from disk. It returns an error on failure.
func adminDistJsProjectstackFfa2a6efJs() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/projectstack.ffa2a6ef.js")
	name := "admin/dist/js/projectstack.ffa2a6ef.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsProjectstackFfa2a6efJsMap reads file data from disk. It returns an error on failure.
func adminDistJsProjectstackFfa2a6efJsMap() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/projectstack.ffa2a6ef.js.map")
	name := "admin/dist/js/projectstack.ffa2a6ef.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsStackAaa39c32Js reads file data from disk. It returns an error on failure.
func adminDistJsStackAaa39c32Js() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/stack.aaa39c32.js")
	name := "admin/dist/js/stack.aaa39c32.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsStackAaa39c32JsMap reads file data from disk. It returns an error on failure.
func adminDistJsStackAaa39c32JsMap() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/stack.aaa39c32.js.map")
	name := "admin/dist/js/stack.aaa39c32.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistManifestJson reads file data from disk. It returns an error on failure.
func adminDistManifestJson() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/manifest.json")
	name := "admin/dist/manifest.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistRobotsTxt reads file data from disk. It returns an error on failure.
func adminDistRobotsTxt() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/robots.txt")
	name := "admin/dist/robots.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"admin/dist/css/app.78060d66.css":                     adminDistCssApp78060d66Css,
	"admin/dist/css/chunk-vendors.e00a3e23.css":           adminDistCssChunkVendorsE00a3e23Css,
	"admin/dist/css/projects.804243e7.css":                adminDistCssProjects804243e7Css,
	"admin/dist/favicon.ico":                              adminDistFaviconIco,
	"admin/dist/img/icons/android-chrome-192x192.png":     adminDistImgIconsAndroidChrome192x192Png,
	"admin/dist/img/icons/android-chrome-512x512.png":     adminDistImgIconsAndroidChrome512x512Png,
	"admin/dist/img/icons/apple-touch-icon-120x120.png":   adminDistImgIconsAppleTouchIcon120x120Png,
	"admin/dist/img/icons/apple-touch-icon-152x152.png":   adminDistImgIconsAppleTouchIcon152x152Png,
	"admin/dist/img/icons/apple-touch-icon-180x180.png":   adminDistImgIconsAppleTouchIcon180x180Png,
	"admin/dist/img/icons/apple-touch-icon-60x60.png":     adminDistImgIconsAppleTouchIcon60x60Png,
	"admin/dist/img/icons/apple-touch-icon-76x76.png":     adminDistImgIconsAppleTouchIcon76x76Png,
	"admin/dist/img/icons/apple-touch-icon.png":           adminDistImgIconsAppleTouchIconPng,
	"admin/dist/img/icons/favicon-16x16.png":              adminDistImgIconsFavicon16x16Png,
	"admin/dist/img/icons/favicon-32x32.png":              adminDistImgIconsFavicon32x32Png,
	"admin/dist/img/icons/msapplication-icon-144x144.png": adminDistImgIconsMsapplicationIcon144x144Png,
	"admin/dist/img/icons/mstile-150x150.png":             adminDistImgIconsMstile150x150Png,
	"admin/dist/img/icons/safari-pinned-tab.svg":          adminDistImgIconsSafariPinnedTabSvg,
	"admin/dist/index.html":                               adminDistIndexHtml,
	"admin/dist/js/about.d300568b.js":                     adminDistJsAboutD300568bJs,
	"admin/dist/js/about.d300568b.js.map":                 adminDistJsAboutD300568bJsMap,
	"admin/dist/js/app.f6b9e71e.js":                       adminDistJsAppF6b9e71eJs,
	"admin/dist/js/app.f6b9e71e.js.map":                   adminDistJsAppF6b9e71eJsMap,
	"admin/dist/js/chunk-vendors.fa84e265.js":             adminDistJsChunkVendorsFa84e265Js,
	"admin/dist/js/chunk-vendors.fa84e265.js.map":         adminDistJsChunkVendorsFa84e265JsMap,
	"admin/dist/js/gear.fc648d2d.js":                      adminDistJsGearFc648d2dJs,
	"admin/dist/js/gear.fc648d2d.js.map":                  adminDistJsGearFc648d2dJsMap,
	"admin/dist/js/preferences.aedb6778.js":               adminDistJsPreferencesAedb6778Js,
	"admin/dist/js/preferences.aedb6778.js.map":           adminDistJsPreferencesAedb6778JsMap,
	"admin/dist/js/projects.b028f481.js":                  adminDistJsProjectsB028f481Js,
	"admin/dist/js/projects.b028f481.js.map":              adminDistJsProjectsB028f481JsMap,
	"admin/dist/js/projectstack.ffa2a6ef.js":              adminDistJsProjectstackFfa2a6efJs,
	"admin/dist/js/projectstack.ffa2a6ef.js.map":          adminDistJsProjectstackFfa2a6efJsMap,
	"admin/dist/js/stack.aaa39c32.js":                     adminDistJsStackAaa39c32Js,
	"admin/dist/js/stack.aaa39c32.js.map":                 adminDistJsStackAaa39c32JsMap,
	"admin/dist/manifest.json":                            adminDistManifestJson,
	"admin/dist/robots.txt":                               adminDistRobotsTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"admin": &bintree{nil, map[string]*bintree{
		"dist": &bintree{nil, map[string]*bintree{
			"css": &bintree{nil, map[string]*bintree{
				"app.78060d66.css":           &bintree{adminDistCssApp78060d66Css, map[string]*bintree{}},
				"chunk-vendors.e00a3e23.css": &bintree{adminDistCssChunkVendorsE00a3e23Css, map[string]*bintree{}},
				"projects.804243e7.css":      &bintree{adminDistCssProjects804243e7Css, map[string]*bintree{}},
			}},
			"favicon.ico": &bintree{adminDistFaviconIco, map[string]*bintree{}},
			"img": &bintree{nil, map[string]*bintree{
				"icons": &bintree{nil, map[string]*bintree{
					"android-chrome-192x192.png":     &bintree{adminDistImgIconsAndroidChrome192x192Png, map[string]*bintree{}},
					"android-chrome-512x512.png":     &bintree{adminDistImgIconsAndroidChrome512x512Png, map[string]*bintree{}},
					"apple-touch-icon-120x120.png":   &bintree{adminDistImgIconsAppleTouchIcon120x120Png, map[string]*bintree{}},
					"apple-touch-icon-152x152.png":   &bintree{adminDistImgIconsAppleTouchIcon152x152Png, map[string]*bintree{}},
					"apple-touch-icon-180x180.png":   &bintree{adminDistImgIconsAppleTouchIcon180x180Png, map[string]*bintree{}},
					"apple-touch-icon-60x60.png":     &bintree{adminDistImgIconsAppleTouchIcon60x60Png, map[string]*bintree{}},
					"apple-touch-icon-76x76.png":     &bintree{adminDistImgIconsAppleTouchIcon76x76Png, map[string]*bintree{}},
					"apple-touch-icon.png":           &bintree{adminDistImgIconsAppleTouchIconPng, map[string]*bintree{}},
					"favicon-16x16.png":              &bintree{adminDistImgIconsFavicon16x16Png, map[string]*bintree{}},
					"favicon-32x32.png":              &bintree{adminDistImgIconsFavicon32x32Png, map[string]*bintree{}},
					"msapplication-icon-144x144.png": &bintree{adminDistImgIconsMsapplicationIcon144x144Png, map[string]*bintree{}},
					"mstile-150x150.png":             &bintree{adminDistImgIconsMstile150x150Png, map[string]*bintree{}},
					"safari-pinned-tab.svg":          &bintree{adminDistImgIconsSafariPinnedTabSvg, map[string]*bintree{}},
				}},
			}},
			"index.html": &bintree{adminDistIndexHtml, map[string]*bintree{}},
			"js": &bintree{nil, map[string]*bintree{
				"about.d300568b.js":             &bintree{adminDistJsAboutD300568bJs, map[string]*bintree{}},
				"about.d300568b.js.map":         &bintree{adminDistJsAboutD300568bJsMap, map[string]*bintree{}},
				"app.f6b9e71e.js":               &bintree{adminDistJsAppF6b9e71eJs, map[string]*bintree{}},
				"app.f6b9e71e.js.map":           &bintree{adminDistJsAppF6b9e71eJsMap, map[string]*bintree{}},
				"chunk-vendors.fa84e265.js":     &bintree{adminDistJsChunkVendorsFa84e265Js, map[string]*bintree{}},
				"chunk-vendors.fa84e265.js.map": &bintree{adminDistJsChunkVendorsFa84e265JsMap, map[string]*bintree{}},
				"gear.fc648d2d.js":              &bintree{adminDistJsGearFc648d2dJs, map[string]*bintree{}},
				"gear.fc648d2d.js.map":          &bintree{adminDistJsGearFc648d2dJsMap, map[string]*bintree{}},
				"preferences.aedb6778.js":       &bintree{adminDistJsPreferencesAedb6778Js, map[string]*bintree{}},
				"preferences.aedb6778.js.map":   &bintree{adminDistJsPreferencesAedb6778JsMap, map[string]*bintree{}},
				"projects.b028f481.js":          &bintree{adminDistJsProjectsB028f481Js, map[string]*bintree{}},
				"projects.b028f481.js.map":      &bintree{adminDistJsProjectsB028f481JsMap, map[string]*bintree{}},
				"projectstack.ffa2a6ef.js":      &bintree{adminDistJsProjectstackFfa2a6efJs, map[string]*bintree{}},
				"projectstack.ffa2a6ef.js.map":  &bintree{adminDistJsProjectstackFfa2a6efJsMap, map[string]*bintree{}},
				"stack.aaa39c32.js":             &bintree{adminDistJsStackAaa39c32Js, map[string]*bintree{}},
				"stack.aaa39c32.js.map":         &bintree{adminDistJsStackAaa39c32JsMap, map[string]*bintree{}},
			}},
			"manifest.json": &bintree{adminDistManifestJson, map[string]*bintree{}},
			"robots.txt":    &bintree{adminDistRobotsTxt, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
