// Code generated by go-bindata.
// sources:
// admin/dist/css/app.c35c9ff6.css
// admin/dist/css/chunk-vendors.fefdce60.css
// admin/dist/css/project.ae73b008.css
// admin/dist/favicon.ico
// admin/dist/fonts/element-icons.2fad952a.woff
// admin/dist/fonts/element-icons.6f0a7632.ttf
// admin/dist/img/icons/android-chrome-192x192.png
// admin/dist/img/icons/android-chrome-512x512.png
// admin/dist/img/icons/apple-touch-icon-120x120.png
// admin/dist/img/icons/apple-touch-icon-152x152.png
// admin/dist/img/icons/apple-touch-icon-180x180.png
// admin/dist/img/icons/apple-touch-icon-60x60.png
// admin/dist/img/icons/apple-touch-icon-76x76.png
// admin/dist/img/icons/apple-touch-icon.png
// admin/dist/img/icons/favicon-16x16.png
// admin/dist/img/icons/favicon-32x32.png
// admin/dist/img/icons/msapplication-icon-144x144.png
// admin/dist/img/icons/mstile-150x150.png
// admin/dist/img/icons/safari-pinned-tab.svg
// admin/dist/index.html
// admin/dist/js/about.77c93d06.js
// admin/dist/js/about.77c93d06.js.map
// admin/dist/js/app.a52852a9.js
// admin/dist/js/app.a52852a9.js.map
// admin/dist/js/chunk-vendors.a591c5de.js
// admin/dist/js/chunk-vendors.a591c5de.js.map
// admin/dist/js/gear.a3b93b30.js
// admin/dist/js/gear.a3b93b30.js.map
// admin/dist/js/preferences.edb08fd9.js
// admin/dist/js/preferences.edb08fd9.js.map
// admin/dist/js/project.f3991509.js
// admin/dist/js/project.f3991509.js.map
// admin/dist/js/stack.ead92c2b.js
// admin/dist/js/stack.ead92c2b.js.map
// admin/dist/manifest.json
// admin/dist/robots.txt
// DO NOT EDIT!

package gearbox

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// adminDistCssAppC35c9ff6Css reads file data from disk. It returns an error on failure.
func adminDistCssAppC35c9ff6Css() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/css/app.c35c9ff6.css")
	name := "admin/dist/css/app.c35c9ff6.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistCssChunkVendorsFefdce60Css reads file data from disk. It returns an error on failure.
func adminDistCssChunkVendorsFefdce60Css() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/css/chunk-vendors.fefdce60.css")
	name := "admin/dist/css/chunk-vendors.fefdce60.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistCssProjectAe73b008Css reads file data from disk. It returns an error on failure.
func adminDistCssProjectAe73b008Css() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/css/project.ae73b008.css")
	name := "admin/dist/css/project.ae73b008.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistFaviconIco reads file data from disk. It returns an error on failure.
func adminDistFaviconIco() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/favicon.ico")
	name := "admin/dist/favicon.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistFontsElementIcons2fad952aWoff reads file data from disk. It returns an error on failure.
func adminDistFontsElementIcons2fad952aWoff() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/fonts/element-icons.2fad952a.woff")
	name := "admin/dist/fonts/element-icons.2fad952a.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistFontsElementIcons6f0a7632Ttf reads file data from disk. It returns an error on failure.
func adminDistFontsElementIcons6f0a7632Ttf() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/fonts/element-icons.6f0a7632.ttf")
	name := "admin/dist/fonts/element-icons.6f0a7632.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsAndroidChrome192x192Png reads file data from disk. It returns an error on failure.
func adminDistImgIconsAndroidChrome192x192Png() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/android-chrome-192x192.png")
	name := "admin/dist/img/icons/android-chrome-192x192.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsAndroidChrome512x512Png reads file data from disk. It returns an error on failure.
func adminDistImgIconsAndroidChrome512x512Png() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/android-chrome-512x512.png")
	name := "admin/dist/img/icons/android-chrome-512x512.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsAppleTouchIcon120x120Png reads file data from disk. It returns an error on failure.
func adminDistImgIconsAppleTouchIcon120x120Png() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/apple-touch-icon-120x120.png")
	name := "admin/dist/img/icons/apple-touch-icon-120x120.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsAppleTouchIcon152x152Png reads file data from disk. It returns an error on failure.
func adminDistImgIconsAppleTouchIcon152x152Png() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/apple-touch-icon-152x152.png")
	name := "admin/dist/img/icons/apple-touch-icon-152x152.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsAppleTouchIcon180x180Png reads file data from disk. It returns an error on failure.
func adminDistImgIconsAppleTouchIcon180x180Png() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/apple-touch-icon-180x180.png")
	name := "admin/dist/img/icons/apple-touch-icon-180x180.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsAppleTouchIcon60x60Png reads file data from disk. It returns an error on failure.
func adminDistImgIconsAppleTouchIcon60x60Png() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/apple-touch-icon-60x60.png")
	name := "admin/dist/img/icons/apple-touch-icon-60x60.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsAppleTouchIcon76x76Png reads file data from disk. It returns an error on failure.
func adminDistImgIconsAppleTouchIcon76x76Png() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/apple-touch-icon-76x76.png")
	name := "admin/dist/img/icons/apple-touch-icon-76x76.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsAppleTouchIconPng reads file data from disk. It returns an error on failure.
func adminDistImgIconsAppleTouchIconPng() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/apple-touch-icon.png")
	name := "admin/dist/img/icons/apple-touch-icon.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsFavicon16x16Png reads file data from disk. It returns an error on failure.
func adminDistImgIconsFavicon16x16Png() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/favicon-16x16.png")
	name := "admin/dist/img/icons/favicon-16x16.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsFavicon32x32Png reads file data from disk. It returns an error on failure.
func adminDistImgIconsFavicon32x32Png() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/favicon-32x32.png")
	name := "admin/dist/img/icons/favicon-32x32.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsMsapplicationIcon144x144Png reads file data from disk. It returns an error on failure.
func adminDistImgIconsMsapplicationIcon144x144Png() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/msapplication-icon-144x144.png")
	name := "admin/dist/img/icons/msapplication-icon-144x144.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsMstile150x150Png reads file data from disk. It returns an error on failure.
func adminDistImgIconsMstile150x150Png() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/mstile-150x150.png")
	name := "admin/dist/img/icons/mstile-150x150.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsSafariPinnedTabSvg reads file data from disk. It returns an error on failure.
func adminDistImgIconsSafariPinnedTabSvg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/safari-pinned-tab.svg")
	name := "admin/dist/img/icons/safari-pinned-tab.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistIndexHtml reads file data from disk. It returns an error on failure.
func adminDistIndexHtml() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/index.html")
	name := "admin/dist/index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsAbout77c93d06Js reads file data from disk. It returns an error on failure.
func adminDistJsAbout77c93d06Js() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/about.77c93d06.js")
	name := "admin/dist/js/about.77c93d06.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsAbout77c93d06JsMap reads file data from disk. It returns an error on failure.
func adminDistJsAbout77c93d06JsMap() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/about.77c93d06.js.map")
	name := "admin/dist/js/about.77c93d06.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsAppA52852a9Js reads file data from disk. It returns an error on failure.
func adminDistJsAppA52852a9Js() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/app.a52852a9.js")
	name := "admin/dist/js/app.a52852a9.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsAppA52852a9JsMap reads file data from disk. It returns an error on failure.
func adminDistJsAppA52852a9JsMap() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/app.a52852a9.js.map")
	name := "admin/dist/js/app.a52852a9.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsChunkVendorsA591c5deJs reads file data from disk. It returns an error on failure.
func adminDistJsChunkVendorsA591c5deJs() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/chunk-vendors.a591c5de.js")
	name := "admin/dist/js/chunk-vendors.a591c5de.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsChunkVendorsA591c5deJsMap reads file data from disk. It returns an error on failure.
func adminDistJsChunkVendorsA591c5deJsMap() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/chunk-vendors.a591c5de.js.map")
	name := "admin/dist/js/chunk-vendors.a591c5de.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsGearA3b93b30Js reads file data from disk. It returns an error on failure.
func adminDistJsGearA3b93b30Js() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/gear.a3b93b30.js")
	name := "admin/dist/js/gear.a3b93b30.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsGearA3b93b30JsMap reads file data from disk. It returns an error on failure.
func adminDistJsGearA3b93b30JsMap() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/gear.a3b93b30.js.map")
	name := "admin/dist/js/gear.a3b93b30.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsPreferencesEdb08fd9Js reads file data from disk. It returns an error on failure.
func adminDistJsPreferencesEdb08fd9Js() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/preferences.edb08fd9.js")
	name := "admin/dist/js/preferences.edb08fd9.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsPreferencesEdb08fd9JsMap reads file data from disk. It returns an error on failure.
func adminDistJsPreferencesEdb08fd9JsMap() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/preferences.edb08fd9.js.map")
	name := "admin/dist/js/preferences.edb08fd9.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsProjectF3991509Js reads file data from disk. It returns an error on failure.
func adminDistJsProjectF3991509Js() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/project.f3991509.js")
	name := "admin/dist/js/project.f3991509.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsProjectF3991509JsMap reads file data from disk. It returns an error on failure.
func adminDistJsProjectF3991509JsMap() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/project.f3991509.js.map")
	name := "admin/dist/js/project.f3991509.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsStackEad92c2bJs reads file data from disk. It returns an error on failure.
func adminDistJsStackEad92c2bJs() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/stack.ead92c2b.js")
	name := "admin/dist/js/stack.ead92c2b.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsStackEad92c2bJsMap reads file data from disk. It returns an error on failure.
func adminDistJsStackEad92c2bJsMap() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/stack.ead92c2b.js.map")
	name := "admin/dist/js/stack.ead92c2b.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistManifestJson reads file data from disk. It returns an error on failure.
func adminDistManifestJson() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/manifest.json")
	name := "admin/dist/manifest.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistRobotsTxt reads file data from disk. It returns an error on failure.
func adminDistRobotsTxt() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/robots.txt")
	name := "admin/dist/robots.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"admin/dist/css/app.c35c9ff6.css":                     adminDistCssAppC35c9ff6Css,
	"admin/dist/css/chunk-vendors.fefdce60.css":           adminDistCssChunkVendorsFefdce60Css,
	"admin/dist/css/project.ae73b008.css":                 adminDistCssProjectAe73b008Css,
	"admin/dist/favicon.ico":                              adminDistFaviconIco,
	"admin/dist/fonts/element-icons.2fad952a.woff":        adminDistFontsElementIcons2fad952aWoff,
	"admin/dist/fonts/element-icons.6f0a7632.ttf":         adminDistFontsElementIcons6f0a7632Ttf,
	"admin/dist/img/icons/android-chrome-192x192.png":     adminDistImgIconsAndroidChrome192x192Png,
	"admin/dist/img/icons/android-chrome-512x512.png":     adminDistImgIconsAndroidChrome512x512Png,
	"admin/dist/img/icons/apple-touch-icon-120x120.png":   adminDistImgIconsAppleTouchIcon120x120Png,
	"admin/dist/img/icons/apple-touch-icon-152x152.png":   adminDistImgIconsAppleTouchIcon152x152Png,
	"admin/dist/img/icons/apple-touch-icon-180x180.png":   adminDistImgIconsAppleTouchIcon180x180Png,
	"admin/dist/img/icons/apple-touch-icon-60x60.png":     adminDistImgIconsAppleTouchIcon60x60Png,
	"admin/dist/img/icons/apple-touch-icon-76x76.png":     adminDistImgIconsAppleTouchIcon76x76Png,
	"admin/dist/img/icons/apple-touch-icon.png":           adminDistImgIconsAppleTouchIconPng,
	"admin/dist/img/icons/favicon-16x16.png":              adminDistImgIconsFavicon16x16Png,
	"admin/dist/img/icons/favicon-32x32.png":              adminDistImgIconsFavicon32x32Png,
	"admin/dist/img/icons/msapplication-icon-144x144.png": adminDistImgIconsMsapplicationIcon144x144Png,
	"admin/dist/img/icons/mstile-150x150.png":             adminDistImgIconsMstile150x150Png,
	"admin/dist/img/icons/safari-pinned-tab.svg":          adminDistImgIconsSafariPinnedTabSvg,
	"admin/dist/index.html":                               adminDistIndexHtml,
	"admin/dist/js/about.77c93d06.js":                     adminDistJsAbout77c93d06Js,
	"admin/dist/js/about.77c93d06.js.map":                 adminDistJsAbout77c93d06JsMap,
	"admin/dist/js/app.a52852a9.js":                       adminDistJsAppA52852a9Js,
	"admin/dist/js/app.a52852a9.js.map":                   adminDistJsAppA52852a9JsMap,
	"admin/dist/js/chunk-vendors.a591c5de.js":             adminDistJsChunkVendorsA591c5deJs,
	"admin/dist/js/chunk-vendors.a591c5de.js.map":         adminDistJsChunkVendorsA591c5deJsMap,
	"admin/dist/js/gear.a3b93b30.js":                      adminDistJsGearA3b93b30Js,
	"admin/dist/js/gear.a3b93b30.js.map":                  adminDistJsGearA3b93b30JsMap,
	"admin/dist/js/preferences.edb08fd9.js":               adminDistJsPreferencesEdb08fd9Js,
	"admin/dist/js/preferences.edb08fd9.js.map":           adminDistJsPreferencesEdb08fd9JsMap,
	"admin/dist/js/project.f3991509.js":                   adminDistJsProjectF3991509Js,
	"admin/dist/js/project.f3991509.js.map":               adminDistJsProjectF3991509JsMap,
	"admin/dist/js/stack.ead92c2b.js":                     adminDistJsStackEad92c2bJs,
	"admin/dist/js/stack.ead92c2b.js.map":                 adminDistJsStackEad92c2bJsMap,
	"admin/dist/manifest.json":                            adminDistManifestJson,
	"admin/dist/robots.txt":                               adminDistRobotsTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"admin": &bintree{nil, map[string]*bintree{
		"dist": &bintree{nil, map[string]*bintree{
			"css": &bintree{nil, map[string]*bintree{
				"app.c35c9ff6.css":           &bintree{adminDistCssAppC35c9ff6Css, map[string]*bintree{}},
				"chunk-vendors.fefdce60.css": &bintree{adminDistCssChunkVendorsFefdce60Css, map[string]*bintree{}},
				"project.ae73b008.css":       &bintree{adminDistCssProjectAe73b008Css, map[string]*bintree{}},
			}},
			"favicon.ico": &bintree{adminDistFaviconIco, map[string]*bintree{}},
			"fonts": &bintree{nil, map[string]*bintree{
				"element-icons.2fad952a.woff": &bintree{adminDistFontsElementIcons2fad952aWoff, map[string]*bintree{}},
				"element-icons.6f0a7632.ttf":  &bintree{adminDistFontsElementIcons6f0a7632Ttf, map[string]*bintree{}},
			}},
			"img": &bintree{nil, map[string]*bintree{
				"icons": &bintree{nil, map[string]*bintree{
					"android-chrome-192x192.png":     &bintree{adminDistImgIconsAndroidChrome192x192Png, map[string]*bintree{}},
					"android-chrome-512x512.png":     &bintree{adminDistImgIconsAndroidChrome512x512Png, map[string]*bintree{}},
					"apple-touch-icon-120x120.png":   &bintree{adminDistImgIconsAppleTouchIcon120x120Png, map[string]*bintree{}},
					"apple-touch-icon-152x152.png":   &bintree{adminDistImgIconsAppleTouchIcon152x152Png, map[string]*bintree{}},
					"apple-touch-icon-180x180.png":   &bintree{adminDistImgIconsAppleTouchIcon180x180Png, map[string]*bintree{}},
					"apple-touch-icon-60x60.png":     &bintree{adminDistImgIconsAppleTouchIcon60x60Png, map[string]*bintree{}},
					"apple-touch-icon-76x76.png":     &bintree{adminDistImgIconsAppleTouchIcon76x76Png, map[string]*bintree{}},
					"apple-touch-icon.png":           &bintree{adminDistImgIconsAppleTouchIconPng, map[string]*bintree{}},
					"favicon-16x16.png":              &bintree{adminDistImgIconsFavicon16x16Png, map[string]*bintree{}},
					"favicon-32x32.png":              &bintree{adminDistImgIconsFavicon32x32Png, map[string]*bintree{}},
					"msapplication-icon-144x144.png": &bintree{adminDistImgIconsMsapplicationIcon144x144Png, map[string]*bintree{}},
					"mstile-150x150.png":             &bintree{adminDistImgIconsMstile150x150Png, map[string]*bintree{}},
					"safari-pinned-tab.svg":          &bintree{adminDistImgIconsSafariPinnedTabSvg, map[string]*bintree{}},
				}},
			}},
			"index.html": &bintree{adminDistIndexHtml, map[string]*bintree{}},
			"js": &bintree{nil, map[string]*bintree{
				"about.77c93d06.js":             &bintree{adminDistJsAbout77c93d06Js, map[string]*bintree{}},
				"about.77c93d06.js.map":         &bintree{adminDistJsAbout77c93d06JsMap, map[string]*bintree{}},
				"app.a52852a9.js":               &bintree{adminDistJsAppA52852a9Js, map[string]*bintree{}},
				"app.a52852a9.js.map":           &bintree{adminDistJsAppA52852a9JsMap, map[string]*bintree{}},
				"chunk-vendors.a591c5de.js":     &bintree{adminDistJsChunkVendorsA591c5deJs, map[string]*bintree{}},
				"chunk-vendors.a591c5de.js.map": &bintree{adminDistJsChunkVendorsA591c5deJsMap, map[string]*bintree{}},
				"gear.a3b93b30.js":              &bintree{adminDistJsGearA3b93b30Js, map[string]*bintree{}},
				"gear.a3b93b30.js.map":          &bintree{adminDistJsGearA3b93b30JsMap, map[string]*bintree{}},
				"preferences.edb08fd9.js":       &bintree{adminDistJsPreferencesEdb08fd9Js, map[string]*bintree{}},
				"preferences.edb08fd9.js.map":   &bintree{adminDistJsPreferencesEdb08fd9JsMap, map[string]*bintree{}},
				"project.f3991509.js":           &bintree{adminDistJsProjectF3991509Js, map[string]*bintree{}},
				"project.f3991509.js.map":       &bintree{adminDistJsProjectF3991509JsMap, map[string]*bintree{}},
				"stack.ead92c2b.js":             &bintree{adminDistJsStackEad92c2bJs, map[string]*bintree{}},
				"stack.ead92c2b.js.map":         &bintree{adminDistJsStackEad92c2bJsMap, map[string]*bintree{}},
			}},
			"manifest.json": &bintree{adminDistManifestJson, map[string]*bintree{}},
			"robots.txt":    &bintree{adminDistRobotsTxt, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
