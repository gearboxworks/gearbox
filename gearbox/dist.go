// Code generated by go-bindata.
// sources:
// app/dist/README.md
// app/dist/eventbroker/etc/daemons/mqttbroker-darwin.json
// app/dist/eventbroker/etc/daemons/mqttbroker-linux.json
// app/dist/eventbroker/etc/daemons/mqttbroker-windows.json
// app/dist/eventbroker/etc/daemons/unfsd-darwin.json
// app/dist/eventbroker/etc/daemons/unfsd-linux.json
// app/dist/eventbroker/etc/daemons/unfsd-windows.json
// app/dist/eventbroker/logs/README.md
// app/dist/eventbroker/mqttbroker/bin/darwin_amd64/hmq
// app/dist/eventbroker/mqttbroker/bin/linux_amd64/hmq
// app/dist/eventbroker/mqttbroker/bin/windows_amd64/hmq.exe
// app/dist/eventbroker/mqttbroker/etc/mqttbroker.cfg
// app/dist/eventbroker/unfsd/bin/darwin_amd64/unfsd
// app/dist/eventbroker/unfsd/etc/exports.json
// app/dist/heartbeat/img/DownArrow.ico
// app/dist/heartbeat/img/DownArrow.jpg
// app/dist/heartbeat/img/IconDown.ico
// app/dist/heartbeat/img/IconDown.png
// app/dist/heartbeat/img/IconError.ico
// app/dist/heartbeat/img/IconError.png
// app/dist/heartbeat/img/IconLogo.ico
// app/dist/heartbeat/img/IconLogo.png
// app/dist/heartbeat/img/IconLogo.xcf
// app/dist/heartbeat/img/IconStarting.ico
// app/dist/heartbeat/img/IconStarting.png
// app/dist/heartbeat/img/IconStopping.ico
// app/dist/heartbeat/img/IconStopping.png
// app/dist/heartbeat/img/IconUp.ico
// app/dist/heartbeat/img/IconUp.png
// app/dist/heartbeat/img/IconWarning.ico
// app/dist/heartbeat/img/IconWarning.png
// app/dist/heartbeat/img/UpArrow.ico
// app/dist/heartbeat/img/UpArrow.jpg
// admin/dist/css/app.594013fd.css
// admin/dist/css/basedirs.f9c15621.css
// admin/dist/css/chunk-vendors.3a837761.css
// admin/dist/css/gearspecs.aed18602.css
// admin/dist/css/projects.d65efeed.css
// admin/dist/css/services.418f1b73.css
// admin/dist/css/stacks.61b4dd89.css
// admin/dist/favicon.ico
// admin/dist/gears.json
// admin/dist/img/angular.e224f5ed.svg
// admin/dist/img/apache.12c49354.svg
// admin/dist/img/codeigniter.434bf735.svg
// admin/dist/img/django.28fe09a0.svg
// admin/dist/img/drupal.66089b06.svg
// admin/dist/img/elasticsearch.3ecfa530.svg
// admin/dist/img/flask.318d58cb.svg
// admin/dist/img/icons/android-chrome-192x192.png
// admin/dist/img/icons/android-chrome-512x512.png
// admin/dist/img/icons/apple-touch-icon-120x120.png
// admin/dist/img/icons/apple-touch-icon-152x152.png
// admin/dist/img/icons/apple-touch-icon-180x180.png
// admin/dist/img/icons/apple-touch-icon-60x60.png
// admin/dist/img/icons/apple-touch-icon-76x76.png
// admin/dist/img/icons/apple-touch-icon.png
// admin/dist/img/icons/favicon-16x16.png
// admin/dist/img/icons/favicon-32x32.png
// admin/dist/img/icons/msapplication-icon-144x144.png
// admin/dist/img/icons/mstile-150x150.png
// admin/dist/img/icons/safari-pinned-tab.svg
// admin/dist/img/joomla.d8aa2e45.svg
// admin/dist/img/laravel.1766a461.svg
// admin/dist/img/mariadb.e16110bc.svg
// admin/dist/img/memcached.2bcccabf.svg
// admin/dist/img/mysql.dd2a5a35.svg
// admin/dist/img/nginx.eae76401.svg
// admin/dist/img/nodejs.94cafb0d.svg
// admin/dist/img/perl.a025edb4.svg
// admin/dist/img/php.fa78b345.svg
// admin/dist/img/python.51c2eab2.svg
// admin/dist/img/rails.2db29782.svg
// admin/dist/img/react.9a28da9f.svg
// admin/dist/img/redis.3c39fafe.svg
// admin/dist/img/ruby.514befa7.svg
// admin/dist/img/wordpress.b08e20e3.svg
// admin/dist/index.html
// admin/dist/js/about.0c99ce26.js
// admin/dist/js/about.0c99ce26.js.map
// admin/dist/js/app.cd14b740.js
// admin/dist/js/app.cd14b740.js.map
// admin/dist/js/basedirs.28a92fe0.js
// admin/dist/js/basedirs.28a92fe0.js.map
// admin/dist/js/basedirs~projects.6e9521bb.js
// admin/dist/js/basedirs~projects.6e9521bb.js.map
// admin/dist/js/chunk-vendors.00a44fb8.js
// admin/dist/js/chunk-vendors.00a44fb8.js.map
// admin/dist/js/gearspecs.e32aef98.js
// admin/dist/js/gearspecs.e32aef98.js.map
// admin/dist/js/projects.43ba54a7.js
// admin/dist/js/projects.43ba54a7.js.map
// admin/dist/js/services.7e899afd.js
// admin/dist/js/services.7e899afd.js.map
// admin/dist/js/stacks.6ce64c24.js
// admin/dist/js/stacks.6ce64c24.js.map
// admin/dist/manifest.json
// admin/dist/robots.txt
// DO NOT EDIT!

package gearbox

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// appDistReadmeMd reads file data from disk. It returns an error on failure.
func appDistReadmeMd() (*asset, error) {
	path := filepath.Join(rootDir, "app/dist/README.md")
	name := "app/dist/README.md"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// appDistEventbrokerEtcDaemonsMqttbrokerDarwinJson reads file data from disk. It returns an error on failure.
func appDistEventbrokerEtcDaemonsMqttbrokerDarwinJson() (*asset, error) {
	path := filepath.Join(rootDir, "app/dist/eventbroker/etc/daemons/mqttbroker-darwin.json")
	name := "app/dist/eventbroker/etc/daemons/mqttbroker-darwin.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// appDistEventbrokerEtcDaemonsMqttbrokerLinuxJson reads file data from disk. It returns an error on failure.
func appDistEventbrokerEtcDaemonsMqttbrokerLinuxJson() (*asset, error) {
	path := filepath.Join(rootDir, "app/dist/eventbroker/etc/daemons/mqttbroker-linux.json")
	name := "app/dist/eventbroker/etc/daemons/mqttbroker-linux.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// appDistEventbrokerEtcDaemonsMqttbrokerWindowsJson reads file data from disk. It returns an error on failure.
func appDistEventbrokerEtcDaemonsMqttbrokerWindowsJson() (*asset, error) {
	path := filepath.Join(rootDir, "app/dist/eventbroker/etc/daemons/mqttbroker-windows.json")
	name := "app/dist/eventbroker/etc/daemons/mqttbroker-windows.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// appDistEventbrokerEtcDaemonsUnfsdDarwinJson reads file data from disk. It returns an error on failure.
func appDistEventbrokerEtcDaemonsUnfsdDarwinJson() (*asset, error) {
	path := filepath.Join(rootDir, "app/dist/eventbroker/etc/daemons/unfsd-darwin.json")
	name := "app/dist/eventbroker/etc/daemons/unfsd-darwin.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// appDistEventbrokerEtcDaemonsUnfsdLinuxJson reads file data from disk. It returns an error on failure.
func appDistEventbrokerEtcDaemonsUnfsdLinuxJson() (*asset, error) {
	path := filepath.Join(rootDir, "app/dist/eventbroker/etc/daemons/unfsd-linux.json")
	name := "app/dist/eventbroker/etc/daemons/unfsd-linux.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// appDistEventbrokerEtcDaemonsUnfsdWindowsJson reads file data from disk. It returns an error on failure.
func appDistEventbrokerEtcDaemonsUnfsdWindowsJson() (*asset, error) {
	path := filepath.Join(rootDir, "app/dist/eventbroker/etc/daemons/unfsd-windows.json")
	name := "app/dist/eventbroker/etc/daemons/unfsd-windows.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// appDistEventbrokerLogsReadmeMd reads file data from disk. It returns an error on failure.
func appDistEventbrokerLogsReadmeMd() (*asset, error) {
	path := filepath.Join(rootDir, "app/dist/eventbroker/logs/README.md")
	name := "app/dist/eventbroker/logs/README.md"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// appDistEventbrokerMqttbrokerBinDarwin_amd64Hmq reads file data from disk. It returns an error on failure.
func appDistEventbrokerMqttbrokerBinDarwin_amd64Hmq() (*asset, error) {
	path := filepath.Join(rootDir, "app/dist/eventbroker/mqttbroker/bin/darwin_amd64/hmq")
	name := "app/dist/eventbroker/mqttbroker/bin/darwin_amd64/hmq"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// appDistEventbrokerMqttbrokerBinLinux_amd64Hmq reads file data from disk. It returns an error on failure.
func appDistEventbrokerMqttbrokerBinLinux_amd64Hmq() (*asset, error) {
	path := filepath.Join(rootDir, "app/dist/eventbroker/mqttbroker/bin/linux_amd64/hmq")
	name := "app/dist/eventbroker/mqttbroker/bin/linux_amd64/hmq"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// appDistEventbrokerMqttbrokerBinWindows_amd64HmqExe reads file data from disk. It returns an error on failure.
func appDistEventbrokerMqttbrokerBinWindows_amd64HmqExe() (*asset, error) {
	path := filepath.Join(rootDir, "app/dist/eventbroker/mqttbroker/bin/windows_amd64/hmq.exe")
	name := "app/dist/eventbroker/mqttbroker/bin/windows_amd64/hmq.exe"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// appDistEventbrokerMqttbrokerEtcMqttbrokerCfg reads file data from disk. It returns an error on failure.
func appDistEventbrokerMqttbrokerEtcMqttbrokerCfg() (*asset, error) {
	path := filepath.Join(rootDir, "app/dist/eventbroker/mqttbroker/etc/mqttbroker.cfg")
	name := "app/dist/eventbroker/mqttbroker/etc/mqttbroker.cfg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// appDistEventbrokerUnfsdBinDarwin_amd64Unfsd reads file data from disk. It returns an error on failure.
func appDistEventbrokerUnfsdBinDarwin_amd64Unfsd() (*asset, error) {
	path := filepath.Join(rootDir, "app/dist/eventbroker/unfsd/bin/darwin_amd64/unfsd")
	name := "app/dist/eventbroker/unfsd/bin/darwin_amd64/unfsd"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// appDistEventbrokerUnfsdEtcExportsJson reads file data from disk. It returns an error on failure.
func appDistEventbrokerUnfsdEtcExportsJson() (*asset, error) {
	path := filepath.Join(rootDir, "app/dist/eventbroker/unfsd/etc/exports.json")
	name := "app/dist/eventbroker/unfsd/etc/exports.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// appDistHeartbeatImgDownarrowIco reads file data from disk. It returns an error on failure.
func appDistHeartbeatImgDownarrowIco() (*asset, error) {
	path := filepath.Join(rootDir, "app/dist/heartbeat/img/DownArrow.ico")
	name := "app/dist/heartbeat/img/DownArrow.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// appDistHeartbeatImgDownarrowJpg reads file data from disk. It returns an error on failure.
func appDistHeartbeatImgDownarrowJpg() (*asset, error) {
	path := filepath.Join(rootDir, "app/dist/heartbeat/img/DownArrow.jpg")
	name := "app/dist/heartbeat/img/DownArrow.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// appDistHeartbeatImgIcondownIco reads file data from disk. It returns an error on failure.
func appDistHeartbeatImgIcondownIco() (*asset, error) {
	path := filepath.Join(rootDir, "app/dist/heartbeat/img/IconDown.ico")
	name := "app/dist/heartbeat/img/IconDown.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// appDistHeartbeatImgIcondownPng reads file data from disk. It returns an error on failure.
func appDistHeartbeatImgIcondownPng() (*asset, error) {
	path := filepath.Join(rootDir, "app/dist/heartbeat/img/IconDown.png")
	name := "app/dist/heartbeat/img/IconDown.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// appDistHeartbeatImgIconerrorIco reads file data from disk. It returns an error on failure.
func appDistHeartbeatImgIconerrorIco() (*asset, error) {
	path := filepath.Join(rootDir, "app/dist/heartbeat/img/IconError.ico")
	name := "app/dist/heartbeat/img/IconError.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// appDistHeartbeatImgIconerrorPng reads file data from disk. It returns an error on failure.
func appDistHeartbeatImgIconerrorPng() (*asset, error) {
	path := filepath.Join(rootDir, "app/dist/heartbeat/img/IconError.png")
	name := "app/dist/heartbeat/img/IconError.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// appDistHeartbeatImgIconlogoIco reads file data from disk. It returns an error on failure.
func appDistHeartbeatImgIconlogoIco() (*asset, error) {
	path := filepath.Join(rootDir, "app/dist/heartbeat/img/IconLogo.ico")
	name := "app/dist/heartbeat/img/IconLogo.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// appDistHeartbeatImgIconlogoPng reads file data from disk. It returns an error on failure.
func appDistHeartbeatImgIconlogoPng() (*asset, error) {
	path := filepath.Join(rootDir, "app/dist/heartbeat/img/IconLogo.png")
	name := "app/dist/heartbeat/img/IconLogo.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// appDistHeartbeatImgIconlogoXcf reads file data from disk. It returns an error on failure.
func appDistHeartbeatImgIconlogoXcf() (*asset, error) {
	path := filepath.Join(rootDir, "app/dist/heartbeat/img/IconLogo.xcf")
	name := "app/dist/heartbeat/img/IconLogo.xcf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// appDistHeartbeatImgIconstartingIco reads file data from disk. It returns an error on failure.
func appDistHeartbeatImgIconstartingIco() (*asset, error) {
	path := filepath.Join(rootDir, "app/dist/heartbeat/img/IconStarting.ico")
	name := "app/dist/heartbeat/img/IconStarting.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// appDistHeartbeatImgIconstartingPng reads file data from disk. It returns an error on failure.
func appDistHeartbeatImgIconstartingPng() (*asset, error) {
	path := filepath.Join(rootDir, "app/dist/heartbeat/img/IconStarting.png")
	name := "app/dist/heartbeat/img/IconStarting.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// appDistHeartbeatImgIconstoppingIco reads file data from disk. It returns an error on failure.
func appDistHeartbeatImgIconstoppingIco() (*asset, error) {
	path := filepath.Join(rootDir, "app/dist/heartbeat/img/IconStopping.ico")
	name := "app/dist/heartbeat/img/IconStopping.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// appDistHeartbeatImgIconstoppingPng reads file data from disk. It returns an error on failure.
func appDistHeartbeatImgIconstoppingPng() (*asset, error) {
	path := filepath.Join(rootDir, "app/dist/heartbeat/img/IconStopping.png")
	name := "app/dist/heartbeat/img/IconStopping.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// appDistHeartbeatImgIconupIco reads file data from disk. It returns an error on failure.
func appDistHeartbeatImgIconupIco() (*asset, error) {
	path := filepath.Join(rootDir, "app/dist/heartbeat/img/IconUp.ico")
	name := "app/dist/heartbeat/img/IconUp.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// appDistHeartbeatImgIconupPng reads file data from disk. It returns an error on failure.
func appDistHeartbeatImgIconupPng() (*asset, error) {
	path := filepath.Join(rootDir, "app/dist/heartbeat/img/IconUp.png")
	name := "app/dist/heartbeat/img/IconUp.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// appDistHeartbeatImgIconwarningIco reads file data from disk. It returns an error on failure.
func appDistHeartbeatImgIconwarningIco() (*asset, error) {
	path := filepath.Join(rootDir, "app/dist/heartbeat/img/IconWarning.ico")
	name := "app/dist/heartbeat/img/IconWarning.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// appDistHeartbeatImgIconwarningPng reads file data from disk. It returns an error on failure.
func appDistHeartbeatImgIconwarningPng() (*asset, error) {
	path := filepath.Join(rootDir, "app/dist/heartbeat/img/IconWarning.png")
	name := "app/dist/heartbeat/img/IconWarning.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// appDistHeartbeatImgUparrowIco reads file data from disk. It returns an error on failure.
func appDistHeartbeatImgUparrowIco() (*asset, error) {
	path := filepath.Join(rootDir, "app/dist/heartbeat/img/UpArrow.ico")
	name := "app/dist/heartbeat/img/UpArrow.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// appDistHeartbeatImgUparrowJpg reads file data from disk. It returns an error on failure.
func appDistHeartbeatImgUparrowJpg() (*asset, error) {
	path := filepath.Join(rootDir, "app/dist/heartbeat/img/UpArrow.jpg")
	name := "app/dist/heartbeat/img/UpArrow.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistCssApp594013fdCss reads file data from disk. It returns an error on failure.
func adminDistCssApp594013fdCss() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/css/app.594013fd.css")
	name := "admin/dist/css/app.594013fd.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistCssBasedirsF9c15621Css reads file data from disk. It returns an error on failure.
func adminDistCssBasedirsF9c15621Css() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/css/basedirs.f9c15621.css")
	name := "admin/dist/css/basedirs.f9c15621.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistCssChunkVendors3a837761Css reads file data from disk. It returns an error on failure.
func adminDistCssChunkVendors3a837761Css() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/css/chunk-vendors.3a837761.css")
	name := "admin/dist/css/chunk-vendors.3a837761.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistCssGearspecsAed18602Css reads file data from disk. It returns an error on failure.
func adminDistCssGearspecsAed18602Css() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/css/gearspecs.aed18602.css")
	name := "admin/dist/css/gearspecs.aed18602.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistCssProjectsD65efeedCss reads file data from disk. It returns an error on failure.
func adminDistCssProjectsD65efeedCss() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/css/projects.d65efeed.css")
	name := "admin/dist/css/projects.d65efeed.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistCssServices418f1b73Css reads file data from disk. It returns an error on failure.
func adminDistCssServices418f1b73Css() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/css/services.418f1b73.css")
	name := "admin/dist/css/services.418f1b73.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistCssStacks61b4dd89Css reads file data from disk. It returns an error on failure.
func adminDistCssStacks61b4dd89Css() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/css/stacks.61b4dd89.css")
	name := "admin/dist/css/stacks.61b4dd89.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistFaviconIco reads file data from disk. It returns an error on failure.
func adminDistFaviconIco() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/favicon.ico")
	name := "admin/dist/favicon.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistGearsJson reads file data from disk. It returns an error on failure.
func adminDistGearsJson() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/gears.json")
	name := "admin/dist/gears.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgAngularE224f5edSvg reads file data from disk. It returns an error on failure.
func adminDistImgAngularE224f5edSvg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/angular.e224f5ed.svg")
	name := "admin/dist/img/angular.e224f5ed.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgApache12c49354Svg reads file data from disk. It returns an error on failure.
func adminDistImgApache12c49354Svg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/apache.12c49354.svg")
	name := "admin/dist/img/apache.12c49354.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgCodeigniter434bf735Svg reads file data from disk. It returns an error on failure.
func adminDistImgCodeigniter434bf735Svg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/codeigniter.434bf735.svg")
	name := "admin/dist/img/codeigniter.434bf735.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgDjango28fe09a0Svg reads file data from disk. It returns an error on failure.
func adminDistImgDjango28fe09a0Svg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/django.28fe09a0.svg")
	name := "admin/dist/img/django.28fe09a0.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgDrupal66089b06Svg reads file data from disk. It returns an error on failure.
func adminDistImgDrupal66089b06Svg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/drupal.66089b06.svg")
	name := "admin/dist/img/drupal.66089b06.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgElasticsearch3ecfa530Svg reads file data from disk. It returns an error on failure.
func adminDistImgElasticsearch3ecfa530Svg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/elasticsearch.3ecfa530.svg")
	name := "admin/dist/img/elasticsearch.3ecfa530.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgFlask318d58cbSvg reads file data from disk. It returns an error on failure.
func adminDistImgFlask318d58cbSvg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/flask.318d58cb.svg")
	name := "admin/dist/img/flask.318d58cb.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsAndroidChrome192x192Png reads file data from disk. It returns an error on failure.
func adminDistImgIconsAndroidChrome192x192Png() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/android-chrome-192x192.png")
	name := "admin/dist/img/icons/android-chrome-192x192.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsAndroidChrome512x512Png reads file data from disk. It returns an error on failure.
func adminDistImgIconsAndroidChrome512x512Png() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/android-chrome-512x512.png")
	name := "admin/dist/img/icons/android-chrome-512x512.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsAppleTouchIcon120x120Png reads file data from disk. It returns an error on failure.
func adminDistImgIconsAppleTouchIcon120x120Png() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/apple-touch-icon-120x120.png")
	name := "admin/dist/img/icons/apple-touch-icon-120x120.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsAppleTouchIcon152x152Png reads file data from disk. It returns an error on failure.
func adminDistImgIconsAppleTouchIcon152x152Png() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/apple-touch-icon-152x152.png")
	name := "admin/dist/img/icons/apple-touch-icon-152x152.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsAppleTouchIcon180x180Png reads file data from disk. It returns an error on failure.
func adminDistImgIconsAppleTouchIcon180x180Png() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/apple-touch-icon-180x180.png")
	name := "admin/dist/img/icons/apple-touch-icon-180x180.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsAppleTouchIcon60x60Png reads file data from disk. It returns an error on failure.
func adminDistImgIconsAppleTouchIcon60x60Png() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/apple-touch-icon-60x60.png")
	name := "admin/dist/img/icons/apple-touch-icon-60x60.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsAppleTouchIcon76x76Png reads file data from disk. It returns an error on failure.
func adminDistImgIconsAppleTouchIcon76x76Png() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/apple-touch-icon-76x76.png")
	name := "admin/dist/img/icons/apple-touch-icon-76x76.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsAppleTouchIconPng reads file data from disk. It returns an error on failure.
func adminDistImgIconsAppleTouchIconPng() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/apple-touch-icon.png")
	name := "admin/dist/img/icons/apple-touch-icon.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsFavicon16x16Png reads file data from disk. It returns an error on failure.
func adminDistImgIconsFavicon16x16Png() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/favicon-16x16.png")
	name := "admin/dist/img/icons/favicon-16x16.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsFavicon32x32Png reads file data from disk. It returns an error on failure.
func adminDistImgIconsFavicon32x32Png() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/favicon-32x32.png")
	name := "admin/dist/img/icons/favicon-32x32.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsMsapplicationIcon144x144Png reads file data from disk. It returns an error on failure.
func adminDistImgIconsMsapplicationIcon144x144Png() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/msapplication-icon-144x144.png")
	name := "admin/dist/img/icons/msapplication-icon-144x144.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsMstile150x150Png reads file data from disk. It returns an error on failure.
func adminDistImgIconsMstile150x150Png() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/mstile-150x150.png")
	name := "admin/dist/img/icons/mstile-150x150.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsSafariPinnedTabSvg reads file data from disk. It returns an error on failure.
func adminDistImgIconsSafariPinnedTabSvg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/safari-pinned-tab.svg")
	name := "admin/dist/img/icons/safari-pinned-tab.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgJoomlaD8aa2e45Svg reads file data from disk. It returns an error on failure.
func adminDistImgJoomlaD8aa2e45Svg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/joomla.d8aa2e45.svg")
	name := "admin/dist/img/joomla.d8aa2e45.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgLaravel1766a461Svg reads file data from disk. It returns an error on failure.
func adminDistImgLaravel1766a461Svg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/laravel.1766a461.svg")
	name := "admin/dist/img/laravel.1766a461.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgMariadbE16110bcSvg reads file data from disk. It returns an error on failure.
func adminDistImgMariadbE16110bcSvg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/mariadb.e16110bc.svg")
	name := "admin/dist/img/mariadb.e16110bc.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgMemcached2bcccabfSvg reads file data from disk. It returns an error on failure.
func adminDistImgMemcached2bcccabfSvg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/memcached.2bcccabf.svg")
	name := "admin/dist/img/memcached.2bcccabf.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgMysqlDd2a5a35Svg reads file data from disk. It returns an error on failure.
func adminDistImgMysqlDd2a5a35Svg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/mysql.dd2a5a35.svg")
	name := "admin/dist/img/mysql.dd2a5a35.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgNginxEae76401Svg reads file data from disk. It returns an error on failure.
func adminDistImgNginxEae76401Svg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/nginx.eae76401.svg")
	name := "admin/dist/img/nginx.eae76401.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgNodejs94cafb0dSvg reads file data from disk. It returns an error on failure.
func adminDistImgNodejs94cafb0dSvg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/nodejs.94cafb0d.svg")
	name := "admin/dist/img/nodejs.94cafb0d.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgPerlA025edb4Svg reads file data from disk. It returns an error on failure.
func adminDistImgPerlA025edb4Svg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/perl.a025edb4.svg")
	name := "admin/dist/img/perl.a025edb4.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgPhpFa78b345Svg reads file data from disk. It returns an error on failure.
func adminDistImgPhpFa78b345Svg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/php.fa78b345.svg")
	name := "admin/dist/img/php.fa78b345.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgPython51c2eab2Svg reads file data from disk. It returns an error on failure.
func adminDistImgPython51c2eab2Svg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/python.51c2eab2.svg")
	name := "admin/dist/img/python.51c2eab2.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgRails2db29782Svg reads file data from disk. It returns an error on failure.
func adminDistImgRails2db29782Svg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/rails.2db29782.svg")
	name := "admin/dist/img/rails.2db29782.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgReact9a28da9fSvg reads file data from disk. It returns an error on failure.
func adminDistImgReact9a28da9fSvg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/react.9a28da9f.svg")
	name := "admin/dist/img/react.9a28da9f.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgRedis3c39fafeSvg reads file data from disk. It returns an error on failure.
func adminDistImgRedis3c39fafeSvg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/redis.3c39fafe.svg")
	name := "admin/dist/img/redis.3c39fafe.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgRuby514befa7Svg reads file data from disk. It returns an error on failure.
func adminDistImgRuby514befa7Svg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/ruby.514befa7.svg")
	name := "admin/dist/img/ruby.514befa7.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgWordpressB08e20e3Svg reads file data from disk. It returns an error on failure.
func adminDistImgWordpressB08e20e3Svg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/wordpress.b08e20e3.svg")
	name := "admin/dist/img/wordpress.b08e20e3.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistIndexHtml reads file data from disk. It returns an error on failure.
func adminDistIndexHtml() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/index.html")
	name := "admin/dist/index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsAbout0c99ce26Js reads file data from disk. It returns an error on failure.
func adminDistJsAbout0c99ce26Js() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/about.0c99ce26.js")
	name := "admin/dist/js/about.0c99ce26.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsAbout0c99ce26JsMap reads file data from disk. It returns an error on failure.
func adminDistJsAbout0c99ce26JsMap() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/about.0c99ce26.js.map")
	name := "admin/dist/js/about.0c99ce26.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsAppCd14b740Js reads file data from disk. It returns an error on failure.
func adminDistJsAppCd14b740Js() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/app.cd14b740.js")
	name := "admin/dist/js/app.cd14b740.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsAppCd14b740JsMap reads file data from disk. It returns an error on failure.
func adminDistJsAppCd14b740JsMap() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/app.cd14b740.js.map")
	name := "admin/dist/js/app.cd14b740.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsBasedirs28a92fe0Js reads file data from disk. It returns an error on failure.
func adminDistJsBasedirs28a92fe0Js() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/basedirs.28a92fe0.js")
	name := "admin/dist/js/basedirs.28a92fe0.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsBasedirs28a92fe0JsMap reads file data from disk. It returns an error on failure.
func adminDistJsBasedirs28a92fe0JsMap() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/basedirs.28a92fe0.js.map")
	name := "admin/dist/js/basedirs.28a92fe0.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsBasedirsProjects6e9521bbJs reads file data from disk. It returns an error on failure.
func adminDistJsBasedirsProjects6e9521bbJs() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/basedirs~projects.6e9521bb.js")
	name := "admin/dist/js/basedirs~projects.6e9521bb.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsBasedirsProjects6e9521bbJsMap reads file data from disk. It returns an error on failure.
func adminDistJsBasedirsProjects6e9521bbJsMap() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/basedirs~projects.6e9521bb.js.map")
	name := "admin/dist/js/basedirs~projects.6e9521bb.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsChunkVendors00a44fb8Js reads file data from disk. It returns an error on failure.
func adminDistJsChunkVendors00a44fb8Js() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/chunk-vendors.00a44fb8.js")
	name := "admin/dist/js/chunk-vendors.00a44fb8.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsChunkVendors00a44fb8JsMap reads file data from disk. It returns an error on failure.
func adminDistJsChunkVendors00a44fb8JsMap() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/chunk-vendors.00a44fb8.js.map")
	name := "admin/dist/js/chunk-vendors.00a44fb8.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsGearspecsE32aef98Js reads file data from disk. It returns an error on failure.
func adminDistJsGearspecsE32aef98Js() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/gearspecs.e32aef98.js")
	name := "admin/dist/js/gearspecs.e32aef98.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsGearspecsE32aef98JsMap reads file data from disk. It returns an error on failure.
func adminDistJsGearspecsE32aef98JsMap() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/gearspecs.e32aef98.js.map")
	name := "admin/dist/js/gearspecs.e32aef98.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsProjects43ba54a7Js reads file data from disk. It returns an error on failure.
func adminDistJsProjects43ba54a7Js() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/projects.43ba54a7.js")
	name := "admin/dist/js/projects.43ba54a7.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsProjects43ba54a7JsMap reads file data from disk. It returns an error on failure.
func adminDistJsProjects43ba54a7JsMap() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/projects.43ba54a7.js.map")
	name := "admin/dist/js/projects.43ba54a7.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsServices7e899afdJs reads file data from disk. It returns an error on failure.
func adminDistJsServices7e899afdJs() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/services.7e899afd.js")
	name := "admin/dist/js/services.7e899afd.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsServices7e899afdJsMap reads file data from disk. It returns an error on failure.
func adminDistJsServices7e899afdJsMap() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/services.7e899afd.js.map")
	name := "admin/dist/js/services.7e899afd.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsStacks6ce64c24Js reads file data from disk. It returns an error on failure.
func adminDistJsStacks6ce64c24Js() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/stacks.6ce64c24.js")
	name := "admin/dist/js/stacks.6ce64c24.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsStacks6ce64c24JsMap reads file data from disk. It returns an error on failure.
func adminDistJsStacks6ce64c24JsMap() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/stacks.6ce64c24.js.map")
	name := "admin/dist/js/stacks.6ce64c24.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistManifestJson reads file data from disk. It returns an error on failure.
func adminDistManifestJson() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/manifest.json")
	name := "admin/dist/manifest.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistRobotsTxt reads file data from disk. It returns an error on failure.
func adminDistRobotsTxt() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/robots.txt")
	name := "admin/dist/robots.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"app/dist/README.md": appDistReadmeMd,
	"app/dist/eventbroker/etc/daemons/mqttbroker-darwin.json": appDistEventbrokerEtcDaemonsMqttbrokerDarwinJson,
	"app/dist/eventbroker/etc/daemons/mqttbroker-linux.json": appDistEventbrokerEtcDaemonsMqttbrokerLinuxJson,
	"app/dist/eventbroker/etc/daemons/mqttbroker-windows.json": appDistEventbrokerEtcDaemonsMqttbrokerWindowsJson,
	"app/dist/eventbroker/etc/daemons/unfsd-darwin.json": appDistEventbrokerEtcDaemonsUnfsdDarwinJson,
	"app/dist/eventbroker/etc/daemons/unfsd-linux.json": appDistEventbrokerEtcDaemonsUnfsdLinuxJson,
	"app/dist/eventbroker/etc/daemons/unfsd-windows.json": appDistEventbrokerEtcDaemonsUnfsdWindowsJson,
	"app/dist/eventbroker/logs/README.md": appDistEventbrokerLogsReadmeMd,
	"app/dist/eventbroker/mqttbroker/bin/darwin_amd64/hmq": appDistEventbrokerMqttbrokerBinDarwin_amd64Hmq,
	"app/dist/eventbroker/mqttbroker/bin/linux_amd64/hmq": appDistEventbrokerMqttbrokerBinLinux_amd64Hmq,
	"app/dist/eventbroker/mqttbroker/bin/windows_amd64/hmq.exe": appDistEventbrokerMqttbrokerBinWindows_amd64HmqExe,
	"app/dist/eventbroker/mqttbroker/etc/mqttbroker.cfg": appDistEventbrokerMqttbrokerEtcMqttbrokerCfg,
	"app/dist/eventbroker/unfsd/bin/darwin_amd64/unfsd": appDistEventbrokerUnfsdBinDarwin_amd64Unfsd,
	"app/dist/eventbroker/unfsd/etc/exports.json": appDistEventbrokerUnfsdEtcExportsJson,
	"app/dist/heartbeat/img/DownArrow.ico": appDistHeartbeatImgDownarrowIco,
	"app/dist/heartbeat/img/DownArrow.jpg": appDistHeartbeatImgDownarrowJpg,
	"app/dist/heartbeat/img/IconDown.ico": appDistHeartbeatImgIcondownIco,
	"app/dist/heartbeat/img/IconDown.png": appDistHeartbeatImgIcondownPng,
	"app/dist/heartbeat/img/IconError.ico": appDistHeartbeatImgIconerrorIco,
	"app/dist/heartbeat/img/IconError.png": appDistHeartbeatImgIconerrorPng,
	"app/dist/heartbeat/img/IconLogo.ico": appDistHeartbeatImgIconlogoIco,
	"app/dist/heartbeat/img/IconLogo.png": appDistHeartbeatImgIconlogoPng,
	"app/dist/heartbeat/img/IconLogo.xcf": appDistHeartbeatImgIconlogoXcf,
	"app/dist/heartbeat/img/IconStarting.ico": appDistHeartbeatImgIconstartingIco,
	"app/dist/heartbeat/img/IconStarting.png": appDistHeartbeatImgIconstartingPng,
	"app/dist/heartbeat/img/IconStopping.ico": appDistHeartbeatImgIconstoppingIco,
	"app/dist/heartbeat/img/IconStopping.png": appDistHeartbeatImgIconstoppingPng,
	"app/dist/heartbeat/img/IconUp.ico": appDistHeartbeatImgIconupIco,
	"app/dist/heartbeat/img/IconUp.png": appDistHeartbeatImgIconupPng,
	"app/dist/heartbeat/img/IconWarning.ico": appDistHeartbeatImgIconwarningIco,
	"app/dist/heartbeat/img/IconWarning.png": appDistHeartbeatImgIconwarningPng,
	"app/dist/heartbeat/img/UpArrow.ico": appDistHeartbeatImgUparrowIco,
	"app/dist/heartbeat/img/UpArrow.jpg": appDistHeartbeatImgUparrowJpg,
	"admin/dist/css/app.594013fd.css": adminDistCssApp594013fdCss,
	"admin/dist/css/basedirs.f9c15621.css": adminDistCssBasedirsF9c15621Css,
	"admin/dist/css/chunk-vendors.3a837761.css": adminDistCssChunkVendors3a837761Css,
	"admin/dist/css/gearspecs.aed18602.css": adminDistCssGearspecsAed18602Css,
	"admin/dist/css/projects.d65efeed.css": adminDistCssProjectsD65efeedCss,
	"admin/dist/css/services.418f1b73.css": adminDistCssServices418f1b73Css,
	"admin/dist/css/stacks.61b4dd89.css": adminDistCssStacks61b4dd89Css,
	"admin/dist/favicon.ico": adminDistFaviconIco,
	"admin/dist/gears.json": adminDistGearsJson,
	"admin/dist/img/angular.e224f5ed.svg": adminDistImgAngularE224f5edSvg,
	"admin/dist/img/apache.12c49354.svg": adminDistImgApache12c49354Svg,
	"admin/dist/img/codeigniter.434bf735.svg": adminDistImgCodeigniter434bf735Svg,
	"admin/dist/img/django.28fe09a0.svg": adminDistImgDjango28fe09a0Svg,
	"admin/dist/img/drupal.66089b06.svg": adminDistImgDrupal66089b06Svg,
	"admin/dist/img/elasticsearch.3ecfa530.svg": adminDistImgElasticsearch3ecfa530Svg,
	"admin/dist/img/flask.318d58cb.svg": adminDistImgFlask318d58cbSvg,
	"admin/dist/img/icons/android-chrome-192x192.png": adminDistImgIconsAndroidChrome192x192Png,
	"admin/dist/img/icons/android-chrome-512x512.png": adminDistImgIconsAndroidChrome512x512Png,
	"admin/dist/img/icons/apple-touch-icon-120x120.png": adminDistImgIconsAppleTouchIcon120x120Png,
	"admin/dist/img/icons/apple-touch-icon-152x152.png": adminDistImgIconsAppleTouchIcon152x152Png,
	"admin/dist/img/icons/apple-touch-icon-180x180.png": adminDistImgIconsAppleTouchIcon180x180Png,
	"admin/dist/img/icons/apple-touch-icon-60x60.png": adminDistImgIconsAppleTouchIcon60x60Png,
	"admin/dist/img/icons/apple-touch-icon-76x76.png": adminDistImgIconsAppleTouchIcon76x76Png,
	"admin/dist/img/icons/apple-touch-icon.png": adminDistImgIconsAppleTouchIconPng,
	"admin/dist/img/icons/favicon-16x16.png": adminDistImgIconsFavicon16x16Png,
	"admin/dist/img/icons/favicon-32x32.png": adminDistImgIconsFavicon32x32Png,
	"admin/dist/img/icons/msapplication-icon-144x144.png": adminDistImgIconsMsapplicationIcon144x144Png,
	"admin/dist/img/icons/mstile-150x150.png": adminDistImgIconsMstile150x150Png,
	"admin/dist/img/icons/safari-pinned-tab.svg": adminDistImgIconsSafariPinnedTabSvg,
	"admin/dist/img/joomla.d8aa2e45.svg": adminDistImgJoomlaD8aa2e45Svg,
	"admin/dist/img/laravel.1766a461.svg": adminDistImgLaravel1766a461Svg,
	"admin/dist/img/mariadb.e16110bc.svg": adminDistImgMariadbE16110bcSvg,
	"admin/dist/img/memcached.2bcccabf.svg": adminDistImgMemcached2bcccabfSvg,
	"admin/dist/img/mysql.dd2a5a35.svg": adminDistImgMysqlDd2a5a35Svg,
	"admin/dist/img/nginx.eae76401.svg": adminDistImgNginxEae76401Svg,
	"admin/dist/img/nodejs.94cafb0d.svg": adminDistImgNodejs94cafb0dSvg,
	"admin/dist/img/perl.a025edb4.svg": adminDistImgPerlA025edb4Svg,
	"admin/dist/img/php.fa78b345.svg": adminDistImgPhpFa78b345Svg,
	"admin/dist/img/python.51c2eab2.svg": adminDistImgPython51c2eab2Svg,
	"admin/dist/img/rails.2db29782.svg": adminDistImgRails2db29782Svg,
	"admin/dist/img/react.9a28da9f.svg": adminDistImgReact9a28da9fSvg,
	"admin/dist/img/redis.3c39fafe.svg": adminDistImgRedis3c39fafeSvg,
	"admin/dist/img/ruby.514befa7.svg": adminDistImgRuby514befa7Svg,
	"admin/dist/img/wordpress.b08e20e3.svg": adminDistImgWordpressB08e20e3Svg,
	"admin/dist/index.html": adminDistIndexHtml,
	"admin/dist/js/about.0c99ce26.js": adminDistJsAbout0c99ce26Js,
	"admin/dist/js/about.0c99ce26.js.map": adminDistJsAbout0c99ce26JsMap,
	"admin/dist/js/app.cd14b740.js": adminDistJsAppCd14b740Js,
	"admin/dist/js/app.cd14b740.js.map": adminDistJsAppCd14b740JsMap,
	"admin/dist/js/basedirs.28a92fe0.js": adminDistJsBasedirs28a92fe0Js,
	"admin/dist/js/basedirs.28a92fe0.js.map": adminDistJsBasedirs28a92fe0JsMap,
	"admin/dist/js/basedirs~projects.6e9521bb.js": adminDistJsBasedirsProjects6e9521bbJs,
	"admin/dist/js/basedirs~projects.6e9521bb.js.map": adminDistJsBasedirsProjects6e9521bbJsMap,
	"admin/dist/js/chunk-vendors.00a44fb8.js": adminDistJsChunkVendors00a44fb8Js,
	"admin/dist/js/chunk-vendors.00a44fb8.js.map": adminDistJsChunkVendors00a44fb8JsMap,
	"admin/dist/js/gearspecs.e32aef98.js": adminDistJsGearspecsE32aef98Js,
	"admin/dist/js/gearspecs.e32aef98.js.map": adminDistJsGearspecsE32aef98JsMap,
	"admin/dist/js/projects.43ba54a7.js": adminDistJsProjects43ba54a7Js,
	"admin/dist/js/projects.43ba54a7.js.map": adminDistJsProjects43ba54a7JsMap,
	"admin/dist/js/services.7e899afd.js": adminDistJsServices7e899afdJs,
	"admin/dist/js/services.7e899afd.js.map": adminDistJsServices7e899afdJsMap,
	"admin/dist/js/stacks.6ce64c24.js": adminDistJsStacks6ce64c24Js,
	"admin/dist/js/stacks.6ce64c24.js.map": adminDistJsStacks6ce64c24JsMap,
	"admin/dist/manifest.json": adminDistManifestJson,
	"admin/dist/robots.txt": adminDistRobotsTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"admin": &bintree{nil, map[string]*bintree{
		"dist": &bintree{nil, map[string]*bintree{
			"css": &bintree{nil, map[string]*bintree{
				"app.594013fd.css": &bintree{adminDistCssApp594013fdCss, map[string]*bintree{}},
				"basedirs.f9c15621.css": &bintree{adminDistCssBasedirsF9c15621Css, map[string]*bintree{}},
				"chunk-vendors.3a837761.css": &bintree{adminDistCssChunkVendors3a837761Css, map[string]*bintree{}},
				"gearspecs.aed18602.css": &bintree{adminDistCssGearspecsAed18602Css, map[string]*bintree{}},
				"projects.d65efeed.css": &bintree{adminDistCssProjectsD65efeedCss, map[string]*bintree{}},
				"services.418f1b73.css": &bintree{adminDistCssServices418f1b73Css, map[string]*bintree{}},
				"stacks.61b4dd89.css": &bintree{adminDistCssStacks61b4dd89Css, map[string]*bintree{}},
			}},
			"favicon.ico": &bintree{adminDistFaviconIco, map[string]*bintree{}},
			"gears.json": &bintree{adminDistGearsJson, map[string]*bintree{}},
			"img": &bintree{nil, map[string]*bintree{
				"angular.e224f5ed.svg": &bintree{adminDistImgAngularE224f5edSvg, map[string]*bintree{}},
				"apache.12c49354.svg": &bintree{adminDistImgApache12c49354Svg, map[string]*bintree{}},
				"codeigniter.434bf735.svg": &bintree{adminDistImgCodeigniter434bf735Svg, map[string]*bintree{}},
				"django.28fe09a0.svg": &bintree{adminDistImgDjango28fe09a0Svg, map[string]*bintree{}},
				"drupal.66089b06.svg": &bintree{adminDistImgDrupal66089b06Svg, map[string]*bintree{}},
				"elasticsearch.3ecfa530.svg": &bintree{adminDistImgElasticsearch3ecfa530Svg, map[string]*bintree{}},
				"flask.318d58cb.svg": &bintree{adminDistImgFlask318d58cbSvg, map[string]*bintree{}},
				"icons": &bintree{nil, map[string]*bintree{
					"android-chrome-192x192.png": &bintree{adminDistImgIconsAndroidChrome192x192Png, map[string]*bintree{}},
					"android-chrome-512x512.png": &bintree{adminDistImgIconsAndroidChrome512x512Png, map[string]*bintree{}},
					"apple-touch-icon-120x120.png": &bintree{adminDistImgIconsAppleTouchIcon120x120Png, map[string]*bintree{}},
					"apple-touch-icon-152x152.png": &bintree{adminDistImgIconsAppleTouchIcon152x152Png, map[string]*bintree{}},
					"apple-touch-icon-180x180.png": &bintree{adminDistImgIconsAppleTouchIcon180x180Png, map[string]*bintree{}},
					"apple-touch-icon-60x60.png": &bintree{adminDistImgIconsAppleTouchIcon60x60Png, map[string]*bintree{}},
					"apple-touch-icon-76x76.png": &bintree{adminDistImgIconsAppleTouchIcon76x76Png, map[string]*bintree{}},
					"apple-touch-icon.png": &bintree{adminDistImgIconsAppleTouchIconPng, map[string]*bintree{}},
					"favicon-16x16.png": &bintree{adminDistImgIconsFavicon16x16Png, map[string]*bintree{}},
					"favicon-32x32.png": &bintree{adminDistImgIconsFavicon32x32Png, map[string]*bintree{}},
					"msapplication-icon-144x144.png": &bintree{adminDistImgIconsMsapplicationIcon144x144Png, map[string]*bintree{}},
					"mstile-150x150.png": &bintree{adminDistImgIconsMstile150x150Png, map[string]*bintree{}},
					"safari-pinned-tab.svg": &bintree{adminDistImgIconsSafariPinnedTabSvg, map[string]*bintree{}},
				}},
				"joomla.d8aa2e45.svg": &bintree{adminDistImgJoomlaD8aa2e45Svg, map[string]*bintree{}},
				"laravel.1766a461.svg": &bintree{adminDistImgLaravel1766a461Svg, map[string]*bintree{}},
				"mariadb.e16110bc.svg": &bintree{adminDistImgMariadbE16110bcSvg, map[string]*bintree{}},
				"memcached.2bcccabf.svg": &bintree{adminDistImgMemcached2bcccabfSvg, map[string]*bintree{}},
				"mysql.dd2a5a35.svg": &bintree{adminDistImgMysqlDd2a5a35Svg, map[string]*bintree{}},
				"nginx.eae76401.svg": &bintree{adminDistImgNginxEae76401Svg, map[string]*bintree{}},
				"nodejs.94cafb0d.svg": &bintree{adminDistImgNodejs94cafb0dSvg, map[string]*bintree{}},
				"perl.a025edb4.svg": &bintree{adminDistImgPerlA025edb4Svg, map[string]*bintree{}},
				"php.fa78b345.svg": &bintree{adminDistImgPhpFa78b345Svg, map[string]*bintree{}},
				"python.51c2eab2.svg": &bintree{adminDistImgPython51c2eab2Svg, map[string]*bintree{}},
				"rails.2db29782.svg": &bintree{adminDistImgRails2db29782Svg, map[string]*bintree{}},
				"react.9a28da9f.svg": &bintree{adminDistImgReact9a28da9fSvg, map[string]*bintree{}},
				"redis.3c39fafe.svg": &bintree{adminDistImgRedis3c39fafeSvg, map[string]*bintree{}},
				"ruby.514befa7.svg": &bintree{adminDistImgRuby514befa7Svg, map[string]*bintree{}},
				"wordpress.b08e20e3.svg": &bintree{adminDistImgWordpressB08e20e3Svg, map[string]*bintree{}},
			}},
			"index.html": &bintree{adminDistIndexHtml, map[string]*bintree{}},
			"js": &bintree{nil, map[string]*bintree{
				"about.0c99ce26.js": &bintree{adminDistJsAbout0c99ce26Js, map[string]*bintree{}},
				"about.0c99ce26.js.map": &bintree{adminDistJsAbout0c99ce26JsMap, map[string]*bintree{}},
				"app.cd14b740.js": &bintree{adminDistJsAppCd14b740Js, map[string]*bintree{}},
				"app.cd14b740.js.map": &bintree{adminDistJsAppCd14b740JsMap, map[string]*bintree{}},
				"basedirs.28a92fe0.js": &bintree{adminDistJsBasedirs28a92fe0Js, map[string]*bintree{}},
				"basedirs.28a92fe0.js.map": &bintree{adminDistJsBasedirs28a92fe0JsMap, map[string]*bintree{}},
				"basedirs~projects.6e9521bb.js": &bintree{adminDistJsBasedirsProjects6e9521bbJs, map[string]*bintree{}},
				"basedirs~projects.6e9521bb.js.map": &bintree{adminDistJsBasedirsProjects6e9521bbJsMap, map[string]*bintree{}},
				"chunk-vendors.00a44fb8.js": &bintree{adminDistJsChunkVendors00a44fb8Js, map[string]*bintree{}},
				"chunk-vendors.00a44fb8.js.map": &bintree{adminDistJsChunkVendors00a44fb8JsMap, map[string]*bintree{}},
				"gearspecs.e32aef98.js": &bintree{adminDistJsGearspecsE32aef98Js, map[string]*bintree{}},
				"gearspecs.e32aef98.js.map": &bintree{adminDistJsGearspecsE32aef98JsMap, map[string]*bintree{}},
				"projects.43ba54a7.js": &bintree{adminDistJsProjects43ba54a7Js, map[string]*bintree{}},
				"projects.43ba54a7.js.map": &bintree{adminDistJsProjects43ba54a7JsMap, map[string]*bintree{}},
				"services.7e899afd.js": &bintree{adminDistJsServices7e899afdJs, map[string]*bintree{}},
				"services.7e899afd.js.map": &bintree{adminDistJsServices7e899afdJsMap, map[string]*bintree{}},
				"stacks.6ce64c24.js": &bintree{adminDistJsStacks6ce64c24Js, map[string]*bintree{}},
				"stacks.6ce64c24.js.map": &bintree{adminDistJsStacks6ce64c24JsMap, map[string]*bintree{}},
			}},
			"manifest.json": &bintree{adminDistManifestJson, map[string]*bintree{}},
			"robots.txt": &bintree{adminDistRobotsTxt, map[string]*bintree{}},
		}},
	}},
	"app": &bintree{nil, map[string]*bintree{
		"dist": &bintree{nil, map[string]*bintree{
			"README.md": &bintree{appDistReadmeMd, map[string]*bintree{}},
			"eventbroker": &bintree{nil, map[string]*bintree{
				"etc": &bintree{nil, map[string]*bintree{
					"daemons": &bintree{nil, map[string]*bintree{
						"mqttbroker-darwin.json": &bintree{appDistEventbrokerEtcDaemonsMqttbrokerDarwinJson, map[string]*bintree{}},
						"mqttbroker-linux.json": &bintree{appDistEventbrokerEtcDaemonsMqttbrokerLinuxJson, map[string]*bintree{}},
						"mqttbroker-windows.json": &bintree{appDistEventbrokerEtcDaemonsMqttbrokerWindowsJson, map[string]*bintree{}},
						"unfsd-darwin.json": &bintree{appDistEventbrokerEtcDaemonsUnfsdDarwinJson, map[string]*bintree{}},
						"unfsd-linux.json": &bintree{appDistEventbrokerEtcDaemonsUnfsdLinuxJson, map[string]*bintree{}},
						"unfsd-windows.json": &bintree{appDistEventbrokerEtcDaemonsUnfsdWindowsJson, map[string]*bintree{}},
					}},
				}},
				"logs": &bintree{nil, map[string]*bintree{
					"README.md": &bintree{appDistEventbrokerLogsReadmeMd, map[string]*bintree{}},
				}},
				"mqttbroker": &bintree{nil, map[string]*bintree{
					"bin": &bintree{nil, map[string]*bintree{
						"darwin_amd64": &bintree{nil, map[string]*bintree{
							"hmq": &bintree{appDistEventbrokerMqttbrokerBinDarwin_amd64Hmq, map[string]*bintree{}},
						}},
						"linux_amd64": &bintree{nil, map[string]*bintree{
							"hmq": &bintree{appDistEventbrokerMqttbrokerBinLinux_amd64Hmq, map[string]*bintree{}},
						}},
						"windows_amd64": &bintree{nil, map[string]*bintree{
							"hmq.exe": &bintree{appDistEventbrokerMqttbrokerBinWindows_amd64HmqExe, map[string]*bintree{}},
						}},
					}},
					"etc": &bintree{nil, map[string]*bintree{
						"mqttbroker.cfg": &bintree{appDistEventbrokerMqttbrokerEtcMqttbrokerCfg, map[string]*bintree{}},
					}},
				}},
				"unfsd": &bintree{nil, map[string]*bintree{
					"bin": &bintree{nil, map[string]*bintree{
						"darwin_amd64": &bintree{nil, map[string]*bintree{
							"unfsd": &bintree{appDistEventbrokerUnfsdBinDarwin_amd64Unfsd, map[string]*bintree{}},
						}},
					}},
					"etc": &bintree{nil, map[string]*bintree{
						"exports.json": &bintree{appDistEventbrokerUnfsdEtcExportsJson, map[string]*bintree{}},
					}},
				}},
			}},
			"heartbeat": &bintree{nil, map[string]*bintree{
				"img": &bintree{nil, map[string]*bintree{
					"DownArrow.ico": &bintree{appDistHeartbeatImgDownarrowIco, map[string]*bintree{}},
					"DownArrow.jpg": &bintree{appDistHeartbeatImgDownarrowJpg, map[string]*bintree{}},
					"IconDown.ico": &bintree{appDistHeartbeatImgIcondownIco, map[string]*bintree{}},
					"IconDown.png": &bintree{appDistHeartbeatImgIcondownPng, map[string]*bintree{}},
					"IconError.ico": &bintree{appDistHeartbeatImgIconerrorIco, map[string]*bintree{}},
					"IconError.png": &bintree{appDistHeartbeatImgIconerrorPng, map[string]*bintree{}},
					"IconLogo.ico": &bintree{appDistHeartbeatImgIconlogoIco, map[string]*bintree{}},
					"IconLogo.png": &bintree{appDistHeartbeatImgIconlogoPng, map[string]*bintree{}},
					"IconLogo.xcf": &bintree{appDistHeartbeatImgIconlogoXcf, map[string]*bintree{}},
					"IconStarting.ico": &bintree{appDistHeartbeatImgIconstartingIco, map[string]*bintree{}},
					"IconStarting.png": &bintree{appDistHeartbeatImgIconstartingPng, map[string]*bintree{}},
					"IconStopping.ico": &bintree{appDistHeartbeatImgIconstoppingIco, map[string]*bintree{}},
					"IconStopping.png": &bintree{appDistHeartbeatImgIconstoppingPng, map[string]*bintree{}},
					"IconUp.ico": &bintree{appDistHeartbeatImgIconupIco, map[string]*bintree{}},
					"IconUp.png": &bintree{appDistHeartbeatImgIconupPng, map[string]*bintree{}},
					"IconWarning.ico": &bintree{appDistHeartbeatImgIconwarningIco, map[string]*bintree{}},
					"IconWarning.png": &bintree{appDistHeartbeatImgIconwarningPng, map[string]*bintree{}},
					"UpArrow.ico": &bintree{appDistHeartbeatImgUparrowIco, map[string]*bintree{}},
					"UpArrow.jpg": &bintree{appDistHeartbeatImgUparrowJpg, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

