// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// admin/dist/css/app.78060d66.css
// admin/dist/css/chunk-vendors.17c55283.css
// admin/dist/css/projects.972eb0d6.css
// admin/dist/css/projectstack.426787a7.css
// admin/dist/favicon.ico
// admin/dist/gears.json
// admin/dist/img/angular.e224f5ed.svg
// admin/dist/img/apache.12c49354.svg
// admin/dist/img/codeigniter.434bf735.svg
// admin/dist/img/django.28fe09a0.svg
// admin/dist/img/drupal.66089b06.svg
// admin/dist/img/elasticsearch.3ecfa530.svg
// admin/dist/img/flask.318d58cb.svg
// admin/dist/img/icons/android-chrome-192x192.png
// admin/dist/img/icons/android-chrome-512x512.png
// admin/dist/img/icons/apple-touch-icon-120x120.png
// admin/dist/img/icons/apple-touch-icon-152x152.png
// admin/dist/img/icons/apple-touch-icon-180x180.png
// admin/dist/img/icons/apple-touch-icon-60x60.png
// admin/dist/img/icons/apple-touch-icon-76x76.png
// admin/dist/img/icons/apple-touch-icon.png
// admin/dist/img/icons/favicon-16x16.png
// admin/dist/img/icons/favicon-32x32.png
// admin/dist/img/icons/msapplication-icon-144x144.png
// admin/dist/img/icons/mstile-150x150.png
// admin/dist/img/icons/safari-pinned-tab.svg
// admin/dist/img/joomla.d8aa2e45.svg
// admin/dist/img/laravel.1766a461.svg
// admin/dist/img/logo.63a7d78d.svg
// admin/dist/img/mariadb.e16110bc.svg
// admin/dist/img/memcached.2bcccabf.svg
// admin/dist/img/mysql.dd2a5a35.svg
// admin/dist/img/nginx.eae76401.svg
// admin/dist/img/nodejs.94cafb0d.svg
// admin/dist/img/perl.a025edb4.svg
// admin/dist/img/php.fa78b345.svg
// admin/dist/img/python.51c2eab2.svg
// admin/dist/img/rails.2db29782.svg
// admin/dist/img/react.9a28da9f.svg
// admin/dist/img/redis.3c39fafe.svg
// admin/dist/img/ruby.514befa7.svg
// admin/dist/img/wordpress.b08e20e3.svg
// admin/dist/index.html
// admin/dist/js/about.ad763791.js
// admin/dist/js/about.ad763791.js.map
// admin/dist/js/app.132898f4.js
// admin/dist/js/app.132898f4.js.map
// admin/dist/js/chunk-vendors.6c201162.js
// admin/dist/js/chunk-vendors.6c201162.js.map
// admin/dist/js/gear.4b844932.js
// admin/dist/js/gear.4b844932.js.map
// admin/dist/js/preferences.57f971a8.js
// admin/dist/js/preferences.57f971a8.js.map
// admin/dist/js/projects.a63c00c9.js
// admin/dist/js/projects.a63c00c9.js.map
// admin/dist/js/projectstack.a29662d8.js
// admin/dist/js/projectstack.a29662d8.js.map
// admin/dist/js/stack.7c6e96d4.js
// admin/dist/js/stack.7c6e96d4.js.map
// admin/dist/manifest.json
// admin/dist/robots.txt
package gearbox

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// adminDistCssApp78060d66Css reads file data from disk. It returns an error on failure.
func adminDistCssApp78060d66Css() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/css/app.78060d66.css")
	name := "admin/dist/css/app.78060d66.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistCssChunkVendors17c55283Css reads file data from disk. It returns an error on failure.
func adminDistCssChunkVendors17c55283Css() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/css/chunk-vendors.17c55283.css")
	name := "admin/dist/css/chunk-vendors.17c55283.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistCssProjects972eb0d6Css reads file data from disk. It returns an error on failure.
func adminDistCssProjects972eb0d6Css() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/css/projects.972eb0d6.css")
	name := "admin/dist/css/projects.972eb0d6.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistCssProjectstack426787a7Css reads file data from disk. It returns an error on failure.
func adminDistCssProjectstack426787a7Css() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/css/projectstack.426787a7.css")
	name := "admin/dist/css/projectstack.426787a7.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistFaviconIco reads file data from disk. It returns an error on failure.
func adminDistFaviconIco() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/favicon.ico")
	name := "admin/dist/favicon.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistGearsJson reads file data from disk. It returns an error on failure.
func adminDistGearsJson() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/gears.json")
	name := "admin/dist/gears.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgAngularE224f5edSvg reads file data from disk. It returns an error on failure.
func adminDistImgAngularE224f5edSvg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/angular.e224f5ed.svg")
	name := "admin/dist/img/angular.e224f5ed.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgApache12c49354Svg reads file data from disk. It returns an error on failure.
func adminDistImgApache12c49354Svg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/apache.12c49354.svg")
	name := "admin/dist/img/apache.12c49354.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgCodeigniter434bf735Svg reads file data from disk. It returns an error on failure.
func adminDistImgCodeigniter434bf735Svg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/codeigniter.434bf735.svg")
	name := "admin/dist/img/codeigniter.434bf735.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgDjango28fe09a0Svg reads file data from disk. It returns an error on failure.
func adminDistImgDjango28fe09a0Svg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/django.28fe09a0.svg")
	name := "admin/dist/img/django.28fe09a0.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgDrupal66089b06Svg reads file data from disk. It returns an error on failure.
func adminDistImgDrupal66089b06Svg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/drupal.66089b06.svg")
	name := "admin/dist/img/drupal.66089b06.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgElasticsearch3ecfa530Svg reads file data from disk. It returns an error on failure.
func adminDistImgElasticsearch3ecfa530Svg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/elasticsearch.3ecfa530.svg")
	name := "admin/dist/img/elasticsearch.3ecfa530.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgFlask318d58cbSvg reads file data from disk. It returns an error on failure.
func adminDistImgFlask318d58cbSvg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/flask.318d58cb.svg")
	name := "admin/dist/img/flask.318d58cb.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsAndroidChrome192x192Png reads file data from disk. It returns an error on failure.
func adminDistImgIconsAndroidChrome192x192Png() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/android-chrome-192x192.png")
	name := "admin/dist/img/icons/android-chrome-192x192.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsAndroidChrome512x512Png reads file data from disk. It returns an error on failure.
func adminDistImgIconsAndroidChrome512x512Png() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/android-chrome-512x512.png")
	name := "admin/dist/img/icons/android-chrome-512x512.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsAppleTouchIcon120x120Png reads file data from disk. It returns an error on failure.
func adminDistImgIconsAppleTouchIcon120x120Png() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/apple-touch-icon-120x120.png")
	name := "admin/dist/img/icons/apple-touch-icon-120x120.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsAppleTouchIcon152x152Png reads file data from disk. It returns an error on failure.
func adminDistImgIconsAppleTouchIcon152x152Png() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/apple-touch-icon-152x152.png")
	name := "admin/dist/img/icons/apple-touch-icon-152x152.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsAppleTouchIcon180x180Png reads file data from disk. It returns an error on failure.
func adminDistImgIconsAppleTouchIcon180x180Png() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/apple-touch-icon-180x180.png")
	name := "admin/dist/img/icons/apple-touch-icon-180x180.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsAppleTouchIcon60x60Png reads file data from disk. It returns an error on failure.
func adminDistImgIconsAppleTouchIcon60x60Png() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/apple-touch-icon-60x60.png")
	name := "admin/dist/img/icons/apple-touch-icon-60x60.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsAppleTouchIcon76x76Png reads file data from disk. It returns an error on failure.
func adminDistImgIconsAppleTouchIcon76x76Png() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/apple-touch-icon-76x76.png")
	name := "admin/dist/img/icons/apple-touch-icon-76x76.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsAppleTouchIconPng reads file data from disk. It returns an error on failure.
func adminDistImgIconsAppleTouchIconPng() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/apple-touch-icon.png")
	name := "admin/dist/img/icons/apple-touch-icon.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsFavicon16x16Png reads file data from disk. It returns an error on failure.
func adminDistImgIconsFavicon16x16Png() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/favicon-16x16.png")
	name := "admin/dist/img/icons/favicon-16x16.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsFavicon32x32Png reads file data from disk. It returns an error on failure.
func adminDistImgIconsFavicon32x32Png() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/favicon-32x32.png")
	name := "admin/dist/img/icons/favicon-32x32.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsMsapplicationIcon144x144Png reads file data from disk. It returns an error on failure.
func adminDistImgIconsMsapplicationIcon144x144Png() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/msapplication-icon-144x144.png")
	name := "admin/dist/img/icons/msapplication-icon-144x144.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsMstile150x150Png reads file data from disk. It returns an error on failure.
func adminDistImgIconsMstile150x150Png() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/mstile-150x150.png")
	name := "admin/dist/img/icons/mstile-150x150.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgIconsSafariPinnedTabSvg reads file data from disk. It returns an error on failure.
func adminDistImgIconsSafariPinnedTabSvg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/icons/safari-pinned-tab.svg")
	name := "admin/dist/img/icons/safari-pinned-tab.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgJoomlaD8aa2e45Svg reads file data from disk. It returns an error on failure.
func adminDistImgJoomlaD8aa2e45Svg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/joomla.d8aa2e45.svg")
	name := "admin/dist/img/joomla.d8aa2e45.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgLaravel1766a461Svg reads file data from disk. It returns an error on failure.
func adminDistImgLaravel1766a461Svg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/laravel.1766a461.svg")
	name := "admin/dist/img/laravel.1766a461.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgLogo63a7d78dSvg reads file data from disk. It returns an error on failure.
func adminDistImgLogo63a7d78dSvg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/logo.63a7d78d.svg")
	name := "admin/dist/img/logo.63a7d78d.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgMariadbE16110bcSvg reads file data from disk. It returns an error on failure.
func adminDistImgMariadbE16110bcSvg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/mariadb.e16110bc.svg")
	name := "admin/dist/img/mariadb.e16110bc.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgMemcached2bcccabfSvg reads file data from disk. It returns an error on failure.
func adminDistImgMemcached2bcccabfSvg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/memcached.2bcccabf.svg")
	name := "admin/dist/img/memcached.2bcccabf.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgMysqlDd2a5a35Svg reads file data from disk. It returns an error on failure.
func adminDistImgMysqlDd2a5a35Svg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/mysql.dd2a5a35.svg")
	name := "admin/dist/img/mysql.dd2a5a35.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgNginxEae76401Svg reads file data from disk. It returns an error on failure.
func adminDistImgNginxEae76401Svg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/nginx.eae76401.svg")
	name := "admin/dist/img/nginx.eae76401.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgNodejs94cafb0dSvg reads file data from disk. It returns an error on failure.
func adminDistImgNodejs94cafb0dSvg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/nodejs.94cafb0d.svg")
	name := "admin/dist/img/nodejs.94cafb0d.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgPerlA025edb4Svg reads file data from disk. It returns an error on failure.
func adminDistImgPerlA025edb4Svg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/perl.a025edb4.svg")
	name := "admin/dist/img/perl.a025edb4.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgPhpFa78b345Svg reads file data from disk. It returns an error on failure.
func adminDistImgPhpFa78b345Svg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/php.fa78b345.svg")
	name := "admin/dist/img/php.fa78b345.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgPython51c2eab2Svg reads file data from disk. It returns an error on failure.
func adminDistImgPython51c2eab2Svg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/python.51c2eab2.svg")
	name := "admin/dist/img/python.51c2eab2.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgRails2db29782Svg reads file data from disk. It returns an error on failure.
func adminDistImgRails2db29782Svg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/rails.2db29782.svg")
	name := "admin/dist/img/rails.2db29782.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgReact9a28da9fSvg reads file data from disk. It returns an error on failure.
func adminDistImgReact9a28da9fSvg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/react.9a28da9f.svg")
	name := "admin/dist/img/react.9a28da9f.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgRedis3c39fafeSvg reads file data from disk. It returns an error on failure.
func adminDistImgRedis3c39fafeSvg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/redis.3c39fafe.svg")
	name := "admin/dist/img/redis.3c39fafe.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgRuby514befa7Svg reads file data from disk. It returns an error on failure.
func adminDistImgRuby514befa7Svg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/ruby.514befa7.svg")
	name := "admin/dist/img/ruby.514befa7.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistImgWordpressB08e20e3Svg reads file data from disk. It returns an error on failure.
func adminDistImgWordpressB08e20e3Svg() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/img/wordpress.b08e20e3.svg")
	name := "admin/dist/img/wordpress.b08e20e3.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistIndexHtml reads file data from disk. It returns an error on failure.
func adminDistIndexHtml() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/index.html")
	name := "admin/dist/index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsAboutAd763791Js reads file data from disk. It returns an error on failure.
func adminDistJsAboutAd763791Js() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/about.ad763791.js")
	name := "admin/dist/js/about.ad763791.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsAboutAd763791JsMap reads file data from disk. It returns an error on failure.
func adminDistJsAboutAd763791JsMap() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/about.ad763791.js.map")
	name := "admin/dist/js/about.ad763791.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsApp132898f4Js reads file data from disk. It returns an error on failure.
func adminDistJsApp132898f4Js() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/app.132898f4.js")
	name := "admin/dist/js/app.132898f4.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsApp132898f4JsMap reads file data from disk. It returns an error on failure.
func adminDistJsApp132898f4JsMap() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/app.132898f4.js.map")
	name := "admin/dist/js/app.132898f4.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsChunkVendors6c201162Js reads file data from disk. It returns an error on failure.
func adminDistJsChunkVendors6c201162Js() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/chunk-vendors.6c201162.js")
	name := "admin/dist/js/chunk-vendors.6c201162.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsChunkVendors6c201162JsMap reads file data from disk. It returns an error on failure.
func adminDistJsChunkVendors6c201162JsMap() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/chunk-vendors.6c201162.js.map")
	name := "admin/dist/js/chunk-vendors.6c201162.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsGear4b844932Js reads file data from disk. It returns an error on failure.
func adminDistJsGear4b844932Js() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/gear.4b844932.js")
	name := "admin/dist/js/gear.4b844932.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsGear4b844932JsMap reads file data from disk. It returns an error on failure.
func adminDistJsGear4b844932JsMap() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/gear.4b844932.js.map")
	name := "admin/dist/js/gear.4b844932.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsPreferences57f971a8Js reads file data from disk. It returns an error on failure.
func adminDistJsPreferences57f971a8Js() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/preferences.57f971a8.js")
	name := "admin/dist/js/preferences.57f971a8.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsPreferences57f971a8JsMap reads file data from disk. It returns an error on failure.
func adminDistJsPreferences57f971a8JsMap() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/preferences.57f971a8.js.map")
	name := "admin/dist/js/preferences.57f971a8.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsProjectsA63c00c9Js reads file data from disk. It returns an error on failure.
func adminDistJsProjectsA63c00c9Js() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/projects.a63c00c9.js")
	name := "admin/dist/js/projects.a63c00c9.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsProjectsA63c00c9JsMap reads file data from disk. It returns an error on failure.
func adminDistJsProjectsA63c00c9JsMap() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/projects.a63c00c9.js.map")
	name := "admin/dist/js/projects.a63c00c9.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsProjectstackA29662d8Js reads file data from disk. It returns an error on failure.
func adminDistJsProjectstackA29662d8Js() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/projectstack.a29662d8.js")
	name := "admin/dist/js/projectstack.a29662d8.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsProjectstackA29662d8JsMap reads file data from disk. It returns an error on failure.
func adminDistJsProjectstackA29662d8JsMap() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/projectstack.a29662d8.js.map")
	name := "admin/dist/js/projectstack.a29662d8.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsStack7c6e96d4Js reads file data from disk. It returns an error on failure.
func adminDistJsStack7c6e96d4Js() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/stack.7c6e96d4.js")
	name := "admin/dist/js/stack.7c6e96d4.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistJsStack7c6e96d4JsMap reads file data from disk. It returns an error on failure.
func adminDistJsStack7c6e96d4JsMap() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/js/stack.7c6e96d4.js.map")
	name := "admin/dist/js/stack.7c6e96d4.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistManifestJson reads file data from disk. It returns an error on failure.
func adminDistManifestJson() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/manifest.json")
	name := "admin/dist/manifest.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminDistRobotsTxt reads file data from disk. It returns an error on failure.
func adminDistRobotsTxt() (*asset, error) {
	path := filepath.Join(rootDir, "admin/dist/robots.txt")
	name := "admin/dist/robots.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"admin/dist/css/app.78060d66.css":                     adminDistCssApp78060d66Css,
	"admin/dist/css/chunk-vendors.17c55283.css":           adminDistCssChunkVendors17c55283Css,
	"admin/dist/css/projects.972eb0d6.css":                adminDistCssProjects972eb0d6Css,
	"admin/dist/css/projectstack.426787a7.css":            adminDistCssProjectstack426787a7Css,
	"admin/dist/favicon.ico":                              adminDistFaviconIco,
	"admin/dist/gears.json":                               adminDistGearsJson,
	"admin/dist/img/angular.e224f5ed.svg":                 adminDistImgAngularE224f5edSvg,
	"admin/dist/img/apache.12c49354.svg":                  adminDistImgApache12c49354Svg,
	"admin/dist/img/codeigniter.434bf735.svg":             adminDistImgCodeigniter434bf735Svg,
	"admin/dist/img/django.28fe09a0.svg":                  adminDistImgDjango28fe09a0Svg,
	"admin/dist/img/drupal.66089b06.svg":                  adminDistImgDrupal66089b06Svg,
	"admin/dist/img/elasticsearch.3ecfa530.svg":           adminDistImgElasticsearch3ecfa530Svg,
	"admin/dist/img/flask.318d58cb.svg":                   adminDistImgFlask318d58cbSvg,
	"admin/dist/img/icons/android-chrome-192x192.png":     adminDistImgIconsAndroidChrome192x192Png,
	"admin/dist/img/icons/android-chrome-512x512.png":     adminDistImgIconsAndroidChrome512x512Png,
	"admin/dist/img/icons/apple-touch-icon-120x120.png":   adminDistImgIconsAppleTouchIcon120x120Png,
	"admin/dist/img/icons/apple-touch-icon-152x152.png":   adminDistImgIconsAppleTouchIcon152x152Png,
	"admin/dist/img/icons/apple-touch-icon-180x180.png":   adminDistImgIconsAppleTouchIcon180x180Png,
	"admin/dist/img/icons/apple-touch-icon-60x60.png":     adminDistImgIconsAppleTouchIcon60x60Png,
	"admin/dist/img/icons/apple-touch-icon-76x76.png":     adminDistImgIconsAppleTouchIcon76x76Png,
	"admin/dist/img/icons/apple-touch-icon.png":           adminDistImgIconsAppleTouchIconPng,
	"admin/dist/img/icons/favicon-16x16.png":              adminDistImgIconsFavicon16x16Png,
	"admin/dist/img/icons/favicon-32x32.png":              adminDistImgIconsFavicon32x32Png,
	"admin/dist/img/icons/msapplication-icon-144x144.png": adminDistImgIconsMsapplicationIcon144x144Png,
	"admin/dist/img/icons/mstile-150x150.png":             adminDistImgIconsMstile150x150Png,
	"admin/dist/img/icons/safari-pinned-tab.svg":          adminDistImgIconsSafariPinnedTabSvg,
	"admin/dist/img/joomla.d8aa2e45.svg":                  adminDistImgJoomlaD8aa2e45Svg,
	"admin/dist/img/laravel.1766a461.svg":                 adminDistImgLaravel1766a461Svg,
	"admin/dist/img/logo.63a7d78d.svg":                    adminDistImgLogo63a7d78dSvg,
	"admin/dist/img/mariadb.e16110bc.svg":                 adminDistImgMariadbE16110bcSvg,
	"admin/dist/img/memcached.2bcccabf.svg":               adminDistImgMemcached2bcccabfSvg,
	"admin/dist/img/mysql.dd2a5a35.svg":                   adminDistImgMysqlDd2a5a35Svg,
	"admin/dist/img/nginx.eae76401.svg":                   adminDistImgNginxEae76401Svg,
	"admin/dist/img/nodejs.94cafb0d.svg":                  adminDistImgNodejs94cafb0dSvg,
	"admin/dist/img/perl.a025edb4.svg":                    adminDistImgPerlA025edb4Svg,
	"admin/dist/img/php.fa78b345.svg":                     adminDistImgPhpFa78b345Svg,
	"admin/dist/img/python.51c2eab2.svg":                  adminDistImgPython51c2eab2Svg,
	"admin/dist/img/rails.2db29782.svg":                   adminDistImgRails2db29782Svg,
	"admin/dist/img/react.9a28da9f.svg":                   adminDistImgReact9a28da9fSvg,
	"admin/dist/img/redis.3c39fafe.svg":                   adminDistImgRedis3c39fafeSvg,
	"admin/dist/img/ruby.514befa7.svg":                    adminDistImgRuby514befa7Svg,
	"admin/dist/img/wordpress.b08e20e3.svg":               adminDistImgWordpressB08e20e3Svg,
	"admin/dist/index.html":                               adminDistIndexHtml,
	"admin/dist/js/about.ad763791.js":                     adminDistJsAboutAd763791Js,
	"admin/dist/js/about.ad763791.js.map":                 adminDistJsAboutAd763791JsMap,
	"admin/dist/js/app.132898f4.js":                       adminDistJsApp132898f4Js,
	"admin/dist/js/app.132898f4.js.map":                   adminDistJsApp132898f4JsMap,
	"admin/dist/js/chunk-vendors.6c201162.js":             adminDistJsChunkVendors6c201162Js,
	"admin/dist/js/chunk-vendors.6c201162.js.map":         adminDistJsChunkVendors6c201162JsMap,
	"admin/dist/js/gear.4b844932.js":                      adminDistJsGear4b844932Js,
	"admin/dist/js/gear.4b844932.js.map":                  adminDistJsGear4b844932JsMap,
	"admin/dist/js/preferences.57f971a8.js":               adminDistJsPreferences57f971a8Js,
	"admin/dist/js/preferences.57f971a8.js.map":           adminDistJsPreferences57f971a8JsMap,
	"admin/dist/js/projects.a63c00c9.js":                  adminDistJsProjectsA63c00c9Js,
	"admin/dist/js/projects.a63c00c9.js.map":              adminDistJsProjectsA63c00c9JsMap,
	"admin/dist/js/projectstack.a29662d8.js":              adminDistJsProjectstackA29662d8Js,
	"admin/dist/js/projectstack.a29662d8.js.map":          adminDistJsProjectstackA29662d8JsMap,
	"admin/dist/js/stack.7c6e96d4.js":                     adminDistJsStack7c6e96d4Js,
	"admin/dist/js/stack.7c6e96d4.js.map":                 adminDistJsStack7c6e96d4JsMap,
	"admin/dist/manifest.json":                            adminDistManifestJson,
	"admin/dist/robots.txt":                               adminDistRobotsTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"admin": &bintree{nil, map[string]*bintree{
		"dist": &bintree{nil, map[string]*bintree{
			"css": &bintree{nil, map[string]*bintree{
				"app.78060d66.css":           &bintree{adminDistCssApp78060d66Css, map[string]*bintree{}},
				"chunk-vendors.17c55283.css": &bintree{adminDistCssChunkVendors17c55283Css, map[string]*bintree{}},
				"projects.972eb0d6.css":      &bintree{adminDistCssProjects972eb0d6Css, map[string]*bintree{}},
				"projectstack.426787a7.css":  &bintree{adminDistCssProjectstack426787a7Css, map[string]*bintree{}},
			}},
			"favicon.ico": &bintree{adminDistFaviconIco, map[string]*bintree{}},
			"gears.json":  &bintree{adminDistGearsJson, map[string]*bintree{}},
			"img": &bintree{nil, map[string]*bintree{
				"angular.e224f5ed.svg":       &bintree{adminDistImgAngularE224f5edSvg, map[string]*bintree{}},
				"apache.12c49354.svg":        &bintree{adminDistImgApache12c49354Svg, map[string]*bintree{}},
				"codeigniter.434bf735.svg":   &bintree{adminDistImgCodeigniter434bf735Svg, map[string]*bintree{}},
				"django.28fe09a0.svg":        &bintree{adminDistImgDjango28fe09a0Svg, map[string]*bintree{}},
				"drupal.66089b06.svg":        &bintree{adminDistImgDrupal66089b06Svg, map[string]*bintree{}},
				"elasticsearch.3ecfa530.svg": &bintree{adminDistImgElasticsearch3ecfa530Svg, map[string]*bintree{}},
				"flask.318d58cb.svg":         &bintree{adminDistImgFlask318d58cbSvg, map[string]*bintree{}},
				"icons": &bintree{nil, map[string]*bintree{
					"android-chrome-192x192.png":     &bintree{adminDistImgIconsAndroidChrome192x192Png, map[string]*bintree{}},
					"android-chrome-512x512.png":     &bintree{adminDistImgIconsAndroidChrome512x512Png, map[string]*bintree{}},
					"apple-touch-icon-120x120.png":   &bintree{adminDistImgIconsAppleTouchIcon120x120Png, map[string]*bintree{}},
					"apple-touch-icon-152x152.png":   &bintree{adminDistImgIconsAppleTouchIcon152x152Png, map[string]*bintree{}},
					"apple-touch-icon-180x180.png":   &bintree{adminDistImgIconsAppleTouchIcon180x180Png, map[string]*bintree{}},
					"apple-touch-icon-60x60.png":     &bintree{adminDistImgIconsAppleTouchIcon60x60Png, map[string]*bintree{}},
					"apple-touch-icon-76x76.png":     &bintree{adminDistImgIconsAppleTouchIcon76x76Png, map[string]*bintree{}},
					"apple-touch-icon.png":           &bintree{adminDistImgIconsAppleTouchIconPng, map[string]*bintree{}},
					"favicon-16x16.png":              &bintree{adminDistImgIconsFavicon16x16Png, map[string]*bintree{}},
					"favicon-32x32.png":              &bintree{adminDistImgIconsFavicon32x32Png, map[string]*bintree{}},
					"msapplication-icon-144x144.png": &bintree{adminDistImgIconsMsapplicationIcon144x144Png, map[string]*bintree{}},
					"mstile-150x150.png":             &bintree{adminDistImgIconsMstile150x150Png, map[string]*bintree{}},
					"safari-pinned-tab.svg":          &bintree{adminDistImgIconsSafariPinnedTabSvg, map[string]*bintree{}},
				}},
				"joomla.d8aa2e45.svg":    &bintree{adminDistImgJoomlaD8aa2e45Svg, map[string]*bintree{}},
				"laravel.1766a461.svg":   &bintree{adminDistImgLaravel1766a461Svg, map[string]*bintree{}},
				"logo.63a7d78d.svg":      &bintree{adminDistImgLogo63a7d78dSvg, map[string]*bintree{}},
				"mariadb.e16110bc.svg":   &bintree{adminDistImgMariadbE16110bcSvg, map[string]*bintree{}},
				"memcached.2bcccabf.svg": &bintree{adminDistImgMemcached2bcccabfSvg, map[string]*bintree{}},
				"mysql.dd2a5a35.svg":     &bintree{adminDistImgMysqlDd2a5a35Svg, map[string]*bintree{}},
				"nginx.eae76401.svg":     &bintree{adminDistImgNginxEae76401Svg, map[string]*bintree{}},
				"nodejs.94cafb0d.svg":    &bintree{adminDistImgNodejs94cafb0dSvg, map[string]*bintree{}},
				"perl.a025edb4.svg":      &bintree{adminDistImgPerlA025edb4Svg, map[string]*bintree{}},
				"php.fa78b345.svg":       &bintree{adminDistImgPhpFa78b345Svg, map[string]*bintree{}},
				"python.51c2eab2.svg":    &bintree{adminDistImgPython51c2eab2Svg, map[string]*bintree{}},
				"rails.2db29782.svg":     &bintree{adminDistImgRails2db29782Svg, map[string]*bintree{}},
				"react.9a28da9f.svg":     &bintree{adminDistImgReact9a28da9fSvg, map[string]*bintree{}},
				"redis.3c39fafe.svg":     &bintree{adminDistImgRedis3c39fafeSvg, map[string]*bintree{}},
				"ruby.514befa7.svg":      &bintree{adminDistImgRuby514befa7Svg, map[string]*bintree{}},
				"wordpress.b08e20e3.svg": &bintree{adminDistImgWordpressB08e20e3Svg, map[string]*bintree{}},
			}},
			"index.html": &bintree{adminDistIndexHtml, map[string]*bintree{}},
			"js": &bintree{nil, map[string]*bintree{
				"about.ad763791.js":             &bintree{adminDistJsAboutAd763791Js, map[string]*bintree{}},
				"about.ad763791.js.map":         &bintree{adminDistJsAboutAd763791JsMap, map[string]*bintree{}},
				"app.132898f4.js":               &bintree{adminDistJsApp132898f4Js, map[string]*bintree{}},
				"app.132898f4.js.map":           &bintree{adminDistJsApp132898f4JsMap, map[string]*bintree{}},
				"chunk-vendors.6c201162.js":     &bintree{adminDistJsChunkVendors6c201162Js, map[string]*bintree{}},
				"chunk-vendors.6c201162.js.map": &bintree{adminDistJsChunkVendors6c201162JsMap, map[string]*bintree{}},
				"gear.4b844932.js":              &bintree{adminDistJsGear4b844932Js, map[string]*bintree{}},
				"gear.4b844932.js.map":          &bintree{adminDistJsGear4b844932JsMap, map[string]*bintree{}},
				"preferences.57f971a8.js":       &bintree{adminDistJsPreferences57f971a8Js, map[string]*bintree{}},
				"preferences.57f971a8.js.map":   &bintree{adminDistJsPreferences57f971a8JsMap, map[string]*bintree{}},
				"projects.a63c00c9.js":          &bintree{adminDistJsProjectsA63c00c9Js, map[string]*bintree{}},
				"projects.a63c00c9.js.map":      &bintree{adminDistJsProjectsA63c00c9JsMap, map[string]*bintree{}},
				"projectstack.a29662d8.js":      &bintree{adminDistJsProjectstackA29662d8Js, map[string]*bintree{}},
				"projectstack.a29662d8.js.map":  &bintree{adminDistJsProjectstackA29662d8JsMap, map[string]*bintree{}},
				"stack.7c6e96d4.js":             &bintree{adminDistJsStack7c6e96d4Js, map[string]*bintree{}},
				"stack.7c6e96d4.js.map":         &bintree{adminDistJsStack7c6e96d4JsMap, map[string]*bintree{}},
			}},
			"manifest.json": &bintree{adminDistManifestJson, map[string]*bintree{}},
			"robots.txt":    &bintree{adminDistRobotsTxt, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
