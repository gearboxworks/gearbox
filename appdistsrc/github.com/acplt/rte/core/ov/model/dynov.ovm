/*
*   $Id: dynov.ovm,v 1.3 2005-02-25 13:26:42 ansgar Exp $
*
*   Copyright (C) 1998
*   Lehrstuhl fuer Prozessleittechnik,
*   D-52056 Aachen, Germany.
*   All rights reserved.
*
*   Author: Ansgar Münnemann <ansgar@plt.rwth-aachen.de>
*
*   This file is part of the ACPLT/OV 
*
*   Licensed under the Apache License, Version 2.0 (the "License");
*   you may not use this file except in compliance with the License.
*   You may obtain a copy of the License at
*
*       http://www.apache.org/licenses/LICENSE-2.0
*
*   Unless required by applicable law or agreed to in writing, software
*   distributed under the License is distributed on an "AS IS" BASIS,
*   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*   See the License for the specific language governing permissions and
*   limitations under the License.

*/
/*
*	History:
*	--------
*	09-04-2002 Ansgar Münnemann <ansgar@plt.rwth-aachen.de>: File created.
*/

#include "ov.ovm"

LIBRARY dynov
	VERSION = "1.1";
	AUTHOR = "Ansgar Münnemann";
	COPYRIGHT = "Copyright (C) 2002-2005 Lehrstuhl für Prozessleittechnik, RWTH Aachen";
	COMMENT = "modell for dynamically engineering of classes and associations";

    CLASS dynobject : CLASS ov/object
	IS_INSTANTIABLE;
	OPERATIONS
		getaccess : C_FUNCTION <OV_FNC_GETACCESS>;
	END_OPERATIONS;
    END_CLASS;

    CLASS dynclass : CLASS ov/class
	IS_INSTANTIABLE;
	IS_FINAL;
	VARIABLES
		isinstantiable : BOOL HAS_ACCESSORS;
	END_VARIABLES;
	OPERATIONS
		getaccess : C_FUNCTION <OV_FNC_GETACCESS>;
		check : C_FUNCTION <DYNOV_FNC_CHECK>;
		uncheck : C_FUNCTION <DYNOV_FNC_UNCHECK>;
	END_OPERATIONS;
    END_CLASS;

    CLASS dynvariable : CLASS ov/variable
	IS_INSTANTIABLE;
	IS_FINAL;
	VARIABLES
		accessrights : UINT HAS_ACCESSORS;
		dynvartype : UINT HAS_ACCESSORS;
		dynveclen : UINT HAS_ACCESSORS;
	END_VARIABLES;
	OPERATIONS
		getaccess : C_FUNCTION <OV_FNC_GETACCESS>;
		check : C_FUNCTION <DYNOV_FNC_CHECK>;
		uncheck : C_FUNCTION <DYNOV_FNC_UNCHECK>;
	END_OPERATIONS;
    END_CLASS;

    CLASS dynoperation : CLASS ov/operation
	VARIABLES
		executeable : BOOL HAS_ACCESSORS;
	END_VARIABLES;
	OPERATIONS
		getaccess : C_FUNCTION <OV_FNC_GETACCESS>;
		check : C_FUNCTION <DYNOV_FNC_CHECK>;
		uncheck : C_FUNCTION <DYNOV_FNC_UNCHECK>;
		execute : C_FUNCTION <DYNOV_FNC_EXECUTE> IS_ABSTRACT;
		fnclink : C_FUNCTION <DYNOV_FNC_LINK> IS_ABSTRACT;
		fncunlink : C_FUNCTION <DYNOV_FNC_UNLINK> IS_ABSTRACT;
		fncaccess : C_FUNCTION <DYNOV_FNC_GETACCESS> IS_ABSTRACT;
		fncget : C_FUNCTION <DYNOV_FNC_GET> IS_ABSTRACT; 
		fncset : C_FUNCTION <DYNOV_FNC_SET> IS_ABSTRACT; 
	END_OPERATIONS;
    END_CLASS;

    CLASS dynpart : CLASS ov/part
	IS_INSTANTIABLE;
	IS_FINAL;
	OPERATIONS
		getaccess : C_FUNCTION <OV_FNC_GETACCESS>;
		check : C_FUNCTION <DYNOV_FNC_CHECK>;
		uncheck : C_FUNCTION <DYNOV_FNC_UNCHECK>;
	END_OPERATIONS;
    END_CLASS;

    CLASS dynassociation : CLASS ov/association
	IS_INSTANTIABLE;
	IS_FINAL;
	VARIABLES
		islinkable : BOOL HAS_ACCESSORS;
	END_VARIABLES;
	OPERATIONS
		getaccess : C_FUNCTION <OV_FNC_GETACCESS>;
		check : C_FUNCTION <DYNOV_FNC_CHECK>;
		uncheck : C_FUNCTION <DYNOV_FNC_UNCHECK>;
	END_OPERATIONS;
    END_CLASS;

    CLASS dynstructure : CLASS ov/structure
	IS_INSTANTIABLE;
	IS_FINAL;
	VARIABLES
		isinstantiable : BOOL HAS_ACCESSORS;
	END_VARIABLES;
	OPERATIONS
		getaccess : C_FUNCTION <OV_FNC_GETACCESS>;
		check : C_FUNCTION <DYNOV_FNC_CHECK>;
		uncheck : C_FUNCTION <DYNOV_FNC_UNCHECK>;
	END_OPERATIONS;
    END_CLASS;

    ASSOCIATION isgetaccessor : ONE_TO_ONE
	PARENT getvariable : CLASS dynov/dynvariable;
	CHILD getoperation : CLASS dynov/dynoperation;
    END_ASSOCIATION;

    ASSOCIATION issetaccessor : ONE_TO_ONE
	PARENT setvariable : CLASS dynov/dynvariable;
	CHILD setoperation : CLASS dynov/dynoperation;
    END_ASSOCIATION;

    ASSOCIATION islinkfnc : ONE_TO_ONE
	PARENT linkassoc : CLASS dynov/dynassociation;
	CHILD linkoperation : CLASS dynov/dynoperation;
    END_ASSOCIATION;

    ASSOCIATION isunlinkfnc : ONE_TO_ONE
	PARENT unlinkassoc : CLASS dynov/dynassociation;
	CHILD unlinkoperation : CLASS dynov/dynoperation;
    END_ASSOCIATION;

    ASSOCIATION assocaccess : ONE_TO_ONE
	PARENT accessassoc : CLASS dynov/dynassociation;
	CHILD accessoperation : CLASS dynov/dynoperation;
    END_ASSOCIATION;

    ASSOCIATION dyninheritance : ONE_TO_MANY
	PARENT dynbaseclass : CLASS ov/class;
	CHILD dynderivedclass : CLASS dynov/dynclass;
    END_ASSOCIATION;

    ASSOCIATION dynparentrelationship : ONE_TO_MANY
	PARENT dynparentclass : CLASS ov/class;
 	CHILD dynparentassociation : CLASS dynov/dynassociation;
    END_ASSOCIATION;

    ASSOCIATION dynchildrelationship : ONE_TO_MANY
	PARENT dynchildclass : CLASS ov/class;
	CHILD dynchildassociation : CLASS dynov/dynassociation;
    END_ASSOCIATION;

    ASSOCIATION dynconstruction : ONE_TO_MANY
	PARENT dynstructure : CLASS ov/structure;
	CHILD dynvariable : CLASS dynov/dynvariable;
    END_ASSOCIATION;

    ASSOCIATION dynembedment : ONE_TO_MANY
	PARENT dynpartclass : CLASS ov/class;
 	CHILD dynpart : CLASS dynov/dynpart;
    END_ASSOCIATION;

END_LIBRARY;

