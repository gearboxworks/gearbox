#include "ov.ovm"
#include "fb.ovm"
#include "ssc.ovm"

LIBRARY SSChelper
	VERSION   = "V0.1 (DD-Mon-YYYY)";
	AUTHOR    = "";
	COPYRIGHT = "";
	COMMENT   = "";
	
	/**
		
		*  
		*   Chair of Process Control Engineering,
		*   D-52056 Aachen, Germany.
		*   All rights reserved.
		*
		*
		*   This file is part of the ACPLT/OV Package 
		*   Licensed under the Apache License, Version 2.0 (the "License");
		*   you may not use this file except in compliance with the License.
		*   You may obtain a copy of the License at
		*
		*       http://www.apache.org/licenses/LICENSE-2.0
		*
		*   Unless required by applicable law or agreed to in writing, software
		*   distributed under the License is distributed on an "AS IS" BASIS,
		*   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		*   See the License for the specific language governing permissions and
		*   limitations under the License.
		*
		Documentation of decoder.
		@note Javadoc syntax is allowed here.
		@attention Changes in this file will only generate new code in ./source/sourcetemplates/. Code in ./source/ is not overwritten. 
	*/
	CLASS decoder : CLASS fb/functionblock
		IS_INSTANTIABLE;
		VARIABLES
			CMD : STRING HAS_SET_ACCESSOR FLAGS = "i" COMMENT = "Command to be processed";
			parameter : STRING FLAGS = "o" COMMENT = "Parameter of the command";
			user : STRING FLAGS = "o" COMMENT = "user of the command";
			order : STRING FLAGS = "o" COMMENT = "order of the command";
			// Add variables here. The syntax is:
			// <Variable name> : <Datatype> [<Accessors>] [<FLAGS>] [<Comment>] [<INITIALVALUE>]
			// Example:
			// varName : STRING HAS_GET_ACCESSOR COMMENT="Description of varname.";
			// Example for a fb/functionblock based class
			// inputNAme : UINT HAS_SET_ACCESSOR FLAGS = "i" COMMENT = "Input of type UINT" INITIALVALUE = 5;
		END_VARIABLES;
		OPERATIONS
			// Declare functions here. You may use your own function types, e.g. MY_FUNC,
			// if MY_FUNC is declared in SSChelper.ovf. Implement the functions in decoder.c.
			// fb/functionblock based classes have to implement typemethod
			typemethod  : C_FUNCTION <FB_FNC_TYPEMETHOD>;
		END_OPERATIONS;
	END_CLASS;
	
	CLASS usercheck : CLASS fb/functionblock
		IS_INSTANTIABLE;
		VARIABLES
			order : STRING  FLAGS = "i" COMMENT = "order to be processed";
			user : STRING FLAGS = "i" COMMENT = "user of the command";
			
			result : BOOL FLAGS = "o" COMMENT = "order is given by the allowed user";
			occupiedby : STRING FLAGS = "o" COMMENT = "id of the occupying user";
			lastOccupier : STRING FLAGS = "o" COMMENT = "id of last occupying user if overridden by OP";
			// Add variables here. The syntax is:
			// <Variable name> : <Datatype> [<Accessors>] [<FLAGS>] [<Comment>] [<INITIALVALUE>]
			// Example:
			// varName : STRING HAS_GET_ACCESSOR COMMENT="Description of varname.";
			// Example for a fb/functionblock based class
			// inputNAme : UINT HAS_SET_ACCESSOR FLAGS = "i" COMMENT = "Input of type UINT" INITIALVALUE = 5;
		END_VARIABLES;
		OPERATIONS
			// Declare functions here. You may use your own function types, e.g. MY_FUNC,
			// if MY_FUNC is declared in SSChelper.ovf. Implement the functions in decoder.c.
			// fb/functionblock based classes have to implement typemethod
			typemethod  : C_FUNCTION <FB_FNC_TYPEMETHOD>;
		END_OPERATIONS;
	END_CLASS;
	CLASS setpointhandler : CLASS fb/functionblock
		IS_INSTANTIABLE;
		VARIABLES
			order : STRING  FLAGS = "i" COMMENT = "order to be processed";
			param : STRING  FLAGS = "i" COMMENT = "parameter";
			userok : BOOL FLAGS = "i" COMMENT = "result of usercheck";
			
			value : SINGLE FLAGS = "o" COMMENT = "actual setpoint";
			
			// Add variables here. The syntax is:
			// <Variable name> : <Datatype> [<Accessors>] [<FLAGS>] [<Comment>] [<INITIALVALUE>]
			// Example:
			// varName : STRING HAS_GET_ACCESSOR COMMENT="Description of varname.";
			// Example for a fb/functionblock based class
			// inputNAme : UINT HAS_SET_ACCESSOR FLAGS = "i" COMMENT = "Input of type UINT" INITIALVALUE = 5;
		END_VARIABLES;
		OPERATIONS
			// Declare functions here. You may use your own function types, e.g. MY_FUNC,
			// if MY_FUNC is declared in SSChelper.ovf. Implement the functions in decoder.c.
			// fb/functionblock based classes have to implement typemethod
			typemethod  : C_FUNCTION <FB_FNC_TYPEMETHOD>;
		END_OPERATIONS;
	END_CLASS;
	CLASS createCMD : CLASS fb/functionblock
		IS_INSTANTIABLE;
		VARIABLES
			order : STRING  FLAGS = "i" COMMENT = "Order to be processed. E.g.: 'OCCUPY'. May be automatically set by SSC action sendCommand.";
			param : STRING  FLAGS = "i" COMMENT = "Parameter in one String combined and comma separated e.g.: 'v=1,T=TRUE:May be automatically set by SSC action sendCommand.";
			sender : STRING  FLAGS = "i" COMMENT = "Sender ID. (In general identifier of outmost parent chart.)";
			start : BOOL FLAGS = "i" COMMENT = "Startsignal. On positiv value the order, param and sender are combined and trigger out is set to true for 1 cycle. Is automatically reset in next cycle." INITIALVALUE = FALSE;
			
			CMD : STRING FLAGS = "o" COMMENT = "Last processed command.";
			trigger: BOOL FLAGS = "o" COMMENT = "Trigger for other fbs." INITIALVALUE = FALSE;
			
			// Add variables here. The syntax is:
			// <Variable name> : <Datatype> [<Accessors>] [<FLAGS>] [<Comment>] [<INITIALVALUE>]
			// Example:
			// varName : STRING HAS_GET_ACCESSOR COMMENT="Description of varname.";
			// Example for a fb/functionblock based class
			// inputNAme : UINT HAS_SET_ACCESSOR FLAGS = "i" COMMENT = "Input of type UINT" INITIALVALUE = 5;
		END_VARIABLES;
		OPERATIONS
			// Declare functions here. You may use your own function types, e.g. MY_FUNC,
			// if MY_FUNC is declared in SSChelper.ovf. Implement the functions in decoder.c.
			// fb/functionblock based classes have to implement typemethod
			typemethod  : C_FUNCTION <FB_FNC_TYPEMETHOD>;
		END_OPERATIONS;
	END_CLASS;
	
	CLASS setVar : CLASS fb/functionblock
		IS_INSTANTIABLE;
		VARIABLES
			path : STRING FLAGS = "i" COMMENT = "Path to target";
			var  : ANY    FLAGS = "i" COMMENT = "var";
			port : STRING FLAGS = "i" COMMENT = "Name of the port";
		
			
			// Add variables here. The syntax is:
			// <Variable name> : <Datatype> [<Accessors>] [<FLAGS>] [<Comment>] [<INITIALVALUE>]
			// Example:
			// varName : STRING HAS_GET_ACCESSOR COMMENT="Description of varname.";
			// Example for a fb/functionblock based class
			// inputNAme : UINT HAS_SET_ACCESSOR FLAGS = "i" COMMENT = "Input of type UINT" INITIALVALUE = 5;
		END_VARIABLES;
		OPERATIONS
			// Declare functions here. You may use your own function types, e.g. MY_FUNC,
			// if MY_FUNC is declared in SSChelper.ovf. Implement the functions in decoder.c.
			// fb/functionblock based classes have to implement typemethod
			typemethod  : C_FUNCTION <FB_FNC_TYPEMETHOD>;
		END_OPERATIONS;
	END_CLASS;
	
	CLASS setVarOnce : CLASS SSChelper/setVar
		IS_INSTANTIABLE;
		VARIABLES
			//Inputs
			pathTrig : STRING FLAGS = "i" COMMENT = "Path to external trigger, which triggers the set process, if its value is uneuqal to NULL or . Trigger port value will be reset to NULL after set process." INITIALVALUE = "";
			portTrig : STRING FLAGS = "i" COMMENT = "Port to external trigger, which triggers the set process, if its value is uneuqal to NULL or . Trigger port value will be reset to NULL after set process." INITIALVALUE = "";
			trig : BOOL   FLAGS = "i" COMMENT = "Direkt trigger for the set process.";
			
			// Outputs
			varOut : ANY  FLAGS = "o" COMMENT = "Value for last set attempt.";
			error :  BOOL FLAGS = "o" COMMENT = "Indicates that an error occured during last set attempt. ";
			trigOut: BOOL FLAGS = "o" COMMENT = "Is true for exactly one cycle after set attempt.";
			
		END_VARIABLES;
		OPERATIONS
			typemethod  : C_FUNCTION <FB_FNC_TYPEMETHOD>;
		END_OPERATIONS;
	END_CLASS;
	
	CLASS getVar : CLASS fb/functionblock
		IS_INSTANTIABLE;
		VARIABLES
			path : STRING  FLAGS = "i" COMMENT = "Path to target";
			var : ANY  FLAGS = "o" COMMENT = "var";
			port : STRING  FLAGS = "i" COMMENT = "Name of the port";
		END_VARIABLES;
		OPERATIONS
			typemethod  : C_FUNCTION <FB_FNC_TYPEMETHOD>;
		END_OPERATIONS;
	END_CLASS;
	
	CLASS getParentIdentifier : CLASS fb/functionblock
		IS_INSTANTIABLE;
		VARIABLES
			level : UINT  FLAGS = "i" COMMENT = "How many levels to move up." INITIALVALUE = 1;
			id : STRING  FLAGS = "o" COMMENT = "Identifier of the parent.";
		END_VARIABLES;
		OPERATIONS
			typemethod  : C_FUNCTION <FB_FNC_TYPEMETHOD>;
		END_OPERATIONS;
	END_CLASS;
	
	CLASS getSCUinfo : CLASS fb/functionblock
		IS_INSTANTIABLE;
		VARIABLES
			path : STRING FLAGS = "i" COMMENT = "Path to SCU";
			workingState : STRING FLAGS = "o" COMMENT = "workingState of PCU";
		    //error : BOOL FLAGS = "o" COMMENT = "TRUE if SCU is inside Errorstate";
			occupiedBy : STRING FLAGS = "o" COMMENT = "id of occupying user ";
			//SetPoint : SINGLE FLAGS = "o" COMMENT = "Setpoint of SCU";
		END_VARIABLES;
		OPERATIONS
			typemethod  : C_FUNCTION <FB_FNC_TYPEMETHOD>;
		END_OPERATIONS;
	END_CLASS;
	
	CLASS getESEStatus : CLASS fb/functionblock
		IS_INSTANTIABLE;
		VARIABLES
			path : STRING FLAGS = "i" COMMENT = "Path to ESE.";
			OCCUPIED : STRING FLAGS = "o" COMMENT = "Who occupies the ESE?";
			OCCST 	 : STRING FLAGS = "o" COMMENT = "Is the ESE free or occupied by auto/hand: FREE, AUTO, HAND";
			EXST 	 : STRING FLAGS = "o" COMMENT = "In what execution stat is the ESE. (PackML States)";
			EXMODE 	 : STRING FLAGS = "o" COMMENT = "How will the ESE execute steps? (AUTO, MANUAL)";
			OPMODE 	 : STRING FLAGS = "o" COMMENT = "What is the current function mode?";
			WORKST 	 : STRING FLAGS = "o" COMMENT = "What step is executed at the moment?";
		END_VARIABLES;
		OPERATIONS
			typemethod  : C_FUNCTION <FB_FNC_TYPEMETHOD>;
		END_OPERATIONS;
	END_CLASS;
	
	CLASS cmdParser : CLASS fb/functionblock
		IS_INSTANTIABLE;
		VARIABLES
			id : STRING FLAGS = "i" COMMENT = "SenderID.";
			order : STRING FLAGS = "i" COMMENT = "Order. For Example 'OCCUPY'";
			params[] : STRING FLAGS ="i" COMMENT = "Parameter. For Example 'V=5'. Can be a String vector: 'V=5','T=20' ...";
			cmd : STRING FLAGS = "o" COMMENT = "Command as a whole string";
		END_VARIABLES;
		OPERATIONS
			typemethod  : C_FUNCTION <FB_FNC_TYPEMETHOD>;
		END_OPERATIONS;
	END_CLASS;
	
	CLASS StringEq : CLASS fb/functionblock
		IS_INSTANTIABLE;
		VARIABLES
			in1 : STRING  FLAGS = "i" COMMENT = "string 1";
			in2 : STRING FLAGS = "i" COMMENT = "string 2";
			
			result : BOOL FLAGS = "o" COMMENT = "Command to be processed";
			// Add variables here. The syntax is:
			// <Variable name> : <Datatype> [<Accessors>] [<FLAGS>] [<Comment>] [<INITIALVALUE>]
			// Example:
			// varName : STRING HAS_GET_ACCESSOR COMMENT="Description of varname.";
			// Example for a fb/functionblock based class
			// inputNAme : UINT HAS_SET_ACCESSOR FLAGS = "i" COMMENT = "Input of type UINT" INITIALVALUE = 5;
		END_VARIABLES;
		OPERATIONS
			// Declare functions here. You may use your own function types, e.g. MY_FUNC,
			// if MY_FUNC is declared in SSChelper.ovf. Implement the functions in decoder.c.
			// fb/functionblock based classes have to implement typemethod
			typemethod  : C_FUNCTION <FB_FNC_TYPEMETHOD>;
		END_OPERATIONS;
	END_CLASS;
	
    CLASS StringSelect : CLASS fb/functionblock
		IS_INSTANTIABLE;
		VARIABLES
			Q	: BOOL   FLAGS = "i" COMMENT = "Switch for IN1 or IN0." INITIALVALUE=FALSE;
			IN1 : STRING FLAGS = "i" COMMENT = "String, that is switched through on FALSE." INITIALVALUE="";
			IN2 : STRING FLAGS = "i" COMMENT = "String, that is switched through on TRUE."  INITIALVALUE="";
		    OUT : STRING FLAGS = "o" COMMENT = "String from IN0 or IN1." INITIALVALUE="";
		END_VARIABLES;
		OPERATIONS
			typemethod  : C_FUNCTION <FB_FNC_TYPEMETHOD>;
		END_OPERATIONS;
	END_CLASS;
	
	CLASS StringVecSelect : CLASS fb/functionblock
		IS_INSTANTIABLE;
		VARIABLES
			K	: UINT   FLAGS = "i" COMMENT = "Index starting from 0.";
			IN[]: STRING FLAGS = "i" COMMENT = "String vector to choose an entry from.";
		    OUT : STRING FLAGS = "o" COMMENT = "String with index K from Vector.";
		    CHECK: BOOL FLAGS = "o" COMMENT = "True if K is in range of IN and IN has length > 0.";
		    LEN : UINT FLAGS = "o" COMMENT = "Lenght of vector in IN.";
		END_VARIABLES;
		OPERATIONS
			typemethod  : C_FUNCTION <FB_FNC_TYPEMETHOD>;
		END_OPERATIONS;
	END_CLASS;
	
	CLASS StringSplit : CLASS fb/functionblock
		IS_INSTANTIABLE;
		VARIABLES
			IN 	  : STRING FLAGS = "i" COMMENT ="String input.";
			DELIM : STRING FLAGS = "i" COMMENT ="Delimiter to split String.";
			
			OUT[] : STRING FLAGS = "o" COMMENT = "String split into string vector.";
			LEN : UINT FLAGS = "o" COMMENT = "Lenght of vector in OUT. ";
			
			OUT1 : STRING FLAGS = "o" COMMENT = "String before first delimiter.";
			OUT2 : STRING FLAGS = "o" COMMENT = "String after first delimiter.";
			OUT3 : STRING FLAGS = "o" COMMENT = "String after last delimiter.";
			FOUND: BOOL FLAGS = "o" COMMENT = "Delimiter found in IN String.";
		END_VARIABLES;
		OPERATIONS
			typemethod  : C_FUNCTION <FB_FNC_TYPEMETHOD>;
		END_OPERATIONS;
	END_CLASS;
END_LIBRARY;
